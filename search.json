[{"title":"CSS基础（一）：选择器的分类及作用","url":"/2022/02/26/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E4%BD%9C%E7%94%A8/","content":"常用选择器\n元素选择器\n作用：根据标签名来选中指定元素\n\n语法：标签名{}\n\n示例：\np&#123;\tcolor: red;&#125;h1&#123;    color: green;&#125;div&#123;    color: blue;&#125;\n\n\nid选择器\n作用：根据元素的id属性值选中一个元素（不能重复）\n\n语法：#id属性值{}\n\n示例：\n&lt;p id=&quot;red&quot;&gt;test&lt;/p&gt;\n\n#red&#123;\tcolor: red;&#125;#box&#123;\tcolor: red;&#125;\n\n\n类选择器\n作用：根据元素的class属性值选中一组元素（可重复）\n\n语法：.class属性值{}\n\n示例：\n&lt;p class=&quot;blue&quot;&gt;test1&lt;/p&gt;&lt;p class=&quot;blue red&quot;&gt;test2&lt;/p&gt;\n\n.blue&#123;\tcolor: blue;&#125;.red&#123;\tcolor: red;&#125;\n\n\n通配选择器\n作用：选中页面中的所有元素\n\n语法：*\n\n示例：\n*&#123;\tcolor: blue;&#125;\n\n\n\n复合选择器\n交集选择器\n作用：选中同时符合多个条件的元素\n\n语法：选择器1选择器2……选择器n{}\n\n示例：\ndiv.red&#123;    font-size:30px;&#125;.a.b.c&#123;    font-size:30px;&#125;/*语法上没问题，但没必要这么写，因为box1已经可以指定唯一元素*/div#box1&#123;    &#125;\n\n注意：交集选择器中如果有元素选择器，必须使用元素选择器开头\n\n\n\n并集选择器（分组选择器）\n作用：同时选择多个选择器对应的元素\n\n语法：选择器1，选择器2，……，选择器n{}\n\n示例：\nh1, span&#123;    &#125;/*交集并集组合，最后div.red表示class值为red的div*/#b1,.p1,h1,span,div.red&#123;    &#125;\n\n\n\n关系选择器\n元素关系\n\n父元素：直接包含子元素的元素\n子元素：直接呗父元素包含的元素\n祖先元素：直接或间接包含后代元素的元素（一个元素的父元素也是它的祖先元素）\n后代元素：直接或间接被祖先元素包含的元素（子元素也是后代元素）\n兄弟元素：拥有相同父元素的元素\n\n\n示例：\n&lt;div&gt;    我是一个div    &lt;p&gt;        我是div中的p元素        &lt;span&gt;我是p元素中的span元素&lt;/span&gt;    &lt;/p&gt;    &lt;span&gt;我是div中的span元素&lt;/span&gt;&lt;/div&gt;\n\n\n子元素选择器\n作用：选中指定父元素中的指定子元素\n\n语法：父元素 &gt; 子元素{}\n\n示例：\ndiv &gt; span&#123;    color: blue;&#125;div &gt; p &gt; span&#123;    &#125;\n\n\n后代元素选择器\n作用：选中指定元素中的指定后代元素\n\n语法：祖先  后代{}\n\n示例：\ndiv span &#123;    color: blue;&#125;\n\n\n兄弟元素选择器\n选中下一个兄弟元素\n\n语法：前一个 +  后一个{}\n\n示例：\np + span &#123;    color: blue;&#125;\n\n\n选中下边所有的兄弟\n\n语法：兄 ~  弟{}\n\n示例：\np ~ span &#123;    color: blue;&#125;\n\n\n\n\n\n属性选择器示例：\n&lt;p title=&quot;abc&quot;&gt;&lt;/p&gt;&lt;p title=&quot;abcdef&quot;&gt;&lt;/p&gt;&lt;p title=&quot;helloabc&quot;&gt;&lt;/p&gt;&lt;p title=&quot;heabcllo&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n\n\n选中含有指定属性的元素\n语法：[属性名]{}\n\n示例：\np[title]&#123;    color: blue;&#125;\n\n\n选中含有指定属性和属性值的元素\n语法：[属性名&#x3D;属性值]{}\n\n示例：\np[title=“abc”]&#123;    color: blue;&#125;\n\n\n选中属性值以指定值开头的元素\n语法：[属性名^&#x3D;abc]{}\n\n示例：\np[title^=“abc”]&#123;    color: blue;&#125;\n\n\n选中属性值以指定值结尾的元素\n语法：[属性名$&#x3D;abc]{}\n\n示例：\np[title$=“abc”]&#123;    color: blue;&#125;\n\n\n选中属性值含有某值的元素\n语法：[属性名*&#x3D;abc]{}\n\n示例：\np[title*=‘abc’]&#123;    color: blue;&#125;\n\n\n\n伪类选择器\n伪类（不存在的类，特殊的类）\n\n伪类用来描述一个元素的特殊状态\n比如：第一个子元素、被点击的元素、鼠标移入的元素……\n\n\n伪类一般情况下都是使用：开头\n\n\n示例：\n&lt;ul&gt;    &lt;li&gt;第一个&lt;/li&gt;    &lt;li&gt;第二个&lt;/li&gt;    &lt;li&gt;第三个&lt;/li&gt;    &lt;li&gt;第四个&lt;/li&gt;    &lt;li&gt;第五个&lt;/li&gt;&lt;/ul&gt;\n\n\n:first-child\n作用：选中第一个子元素\n\n示例：\nul&gt;li:first-child&#123;    color: blue;&#125;\n\n\n:last-child\n作用：选中最后一个子元素\n\n示例：\nul&gt;li:last-child&#123;    color: blue;&#125;\n\n\n:nth-child()\n作用：选中第n个子元素\n\n特殊值：\n\nn：全选中\n2n或even：选中偶数位的元素\n2n+1或odd：选中奇数位的元素\n\n\n示例：\nul&gt;li:nth-child(3)&#123;    color: blue;&#125;ul&gt;li:nth-child(n)&#123;    color: blue;&#125;\n\n\n\n\n以上这些伪类都是根据所有的子元素进行排序\n\n示例：\n&lt;ul&gt;    &lt;span&gt;第〇个&lt;/span&gt;    &lt;li&gt;第一个&lt;/li&gt;    &lt;li&gt;第二个&lt;/li&gt;    &lt;li&gt;第三个&lt;/li&gt;    &lt;li&gt;第四个&lt;/li&gt;    &lt;li&gt;第五个&lt;/li&gt;&lt;/ul&gt;\n\n\n:first-of-type\n示例：\nul&gt;li:first-of-type&#123;    color: blue;&#125;\n\n\n:last-of-type\n:nth-of-type\n\n\n以上这些伪类和上述的类似，不同点是它们是在同类型元素中进行排序\n\n\n:not() 否定伪类\n作用：将符合条件的元素从选择器中去除\n\n示例：\nul&gt;li:not(:nth-child(3))&#123;    color: blue;&#125;\n\n\n超链接的伪类（a元素的伪类）\n作用：将符合条件的元素从选择器中去除\n\n语法：\n\na:link{}\n用来表示没访问过的链接（正常的链接）\n\na:visited{}\n用来表示访问过的链接（点击过）\n由于隐私原因，visited这个伪类只能修改链接的颜色\n\n\n\n示例：\na:link&#123;    color:red;    font-size:20px;&#125;a:visited&#123;    color:orange;    /*font-size在visited中不起作用*/    font-size:20px;&#125;\n\n\n:hover 鼠标移入伪类\n作用：用来表示鼠标移入的状态\n\n示例：\na:hover&#123;    color:aqua;    font-size:50px;&#125;\n\n\n:active 鼠标点击伪类\n作用：用来表示鼠标点击\n\n示例：\na:active&#123;    color:aqua;    font-size:50px;&#125;\n\n\n\n\n注：有先后顺序之分，link、vidited、focus、hover、active（其中link和visited顺序可交换\n\n伪元素选择器\n伪元素（不存在的元素，特殊的位置）\n\n伪类一般情况下都是使用 :: 开头\n\n\n示例：\n&lt;ul&gt;    &lt;li&gt;第一个&lt;/li&gt;    &lt;li&gt;第二个&lt;/li&gt;    &lt;li&gt;第三个&lt;/li&gt;    &lt;li&gt;第四个&lt;/li&gt;    &lt;li&gt;第五个&lt;/li&gt;&lt;/ul&gt;\n\n\n::first-letter{}\n作用：表示第一个字母\n\n示例：\np::first-letter&#123;    font-size:50px;&#125;\n\n\n::first-line{}\n作用：表示第一行\n\n示例：\np::first-letter&#123;    background-color:yellow;&#125;\n\n\n::selection{}\n作用：表示选中的内容\n\n示例：\np::selection&#123;    background-color:greenyellow;&#125;\n\n\n::before{}\n作用：表示元素的开始，必须结合content属性一起用\n\n示例：\ndiv::before&#123;    /*在div中最开头出现红色abc字样，因为它是通过css加的，所以它无法被选中*/    content:&#x27;abc&#x27;;    color:red;&#125;\n\n\n::after{}\n作用：表示元素的最后，必须结合content属性一起用\n\n示例：\ndiv::before&#123;    /*在div中最开头出现红色abc字样，因为它是通过css加的，所以它无法被选中*/    content:&#x27;abc&#x27;;    color:red;&#125;\n\n\n\n","categories":["CSS"],"tags":["CSS"]},{"title":"CSS基础（三）：选择器的权重","url":"/2022/02/27/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E6%9D%83%E9%87%8D/","content":"\n样式的冲突：通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值。\n发生样式冲突时，应用哪个样式由选择器的权重（优先级）决定\n\n选择器的权重排序\n内联样式\n优先级：1,0,0,0（最高）\n\n示例：\n&lt;div id=&quot;box1&quot; class=&quot;red&quot; style=&quot;background-color:skyblue&quot;&gt;    我是一个div&lt;/div&gt;\n\n\nid选择器\n优先级：0,1,0,0\n\n示例：\n#box1&#123;    background-color:orange;&#125;\n\n\n类和伪类选择器\n优先级：0,0,1,0\n\n示例：\n.red&#123;    background-color:red;&#125;\n\n\n元素选择器\n优先级：0,0,0,1\n\n示例：\ndiv&#123;    background-color:yellow;&#125;\n\n\n通配选择器\n优先级：0,0,0,0\n\n示例：\ndiv&#123;    font-size:20px;&#125;*&#123;    font-size:50px;&#125;/*则字体显示为20px大小*/\n\n\n继承的样式\n优先级：没有优先级\n\n示例：\n&lt;div&gt;    我是一个div    &lt;span&gt;我是div中的span&lt;/span&gt;&lt;/div&gt;\n\ndiv&#123;    font-size:20px;&#125;*&#123;    font-size:50px;&#125;/*则“我是一个div”字体显示为20px大小，“我是div中的span”字体显示为50px*/\n\n\n\n\n比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的，不会相加）\n\n\n示例：\n/*优先级为0，0，0，1*/div&#123;    background-color:yellow;&#125;/*优先级为0，1，0，1*/div#box&#123;    background-color:orange;&#125;/*单独计算优先级，在选择器内不参与累加*/div,p,span&#123;    background-color:orange;&#125;\n\n\n选择器的累加不会超过器最大的数量级，比如：类选择器再高也不会超过id选择器\n\n\n示例：\n/*优先级为0，1，0，0*/#box&#123;    background-color:yellow;&#125;/*优先级不超过0，1，0，0*/.d1.d2.d3.d4.d5.d6.d7.d8.d9.d10.d11&#123;    background-color:yellow;&#125;\n\n\nTips：选择器写得越具体、越长，优先级越高。\n\n\n若优先级计算后相同，则优先使用靠下的样式\n\n\n示例：\n&lt;div class=&quot;d1 d2&quot;&gt;    &lt;/div&gt;\n\n.d1&#123;    background-color:yellow;&#125;.d2&#123;    background-color:red;&#125;/*则背景显示为红色*/\n\n\n可以在某一个样式后边添加 ！important，则此时该样式会获取到最高的优先级，甚至超过内联样式\n\n\n示例：\n&lt;div id=&quot;box1&quot; class=&quot;d1&quot; style=&quot;background-color:skyblue&quot;&gt;    我是一个div&lt;/div&gt;\n\n.d1&#123;    background-color:yellow !important;&#125;/*则背景显示为黄色*/\n\n\n注意：在开发中要慎用 ！important。\n\n","categories":["CSS"],"tags":["CSS"]},{"title":"CSS基础（七）：字体","url":"/2022/03/02/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%AD%97%E4%BD%93/","content":"字体相关样式\ncolor  字体颜色（严格：前景色，一般用来设置字体颜色）\n\nfont-size：字体大小\n\n1 em &#x3D; 当前元素的一个font-size\n1 rem &#x3D; 根元素的一个font-size\n\n\nfont-family：字体族（格式）\n\n可同时指定多个字体，字体间使用逗号隔开，字体生效时优先使用第一个，第一个无法使用则使用第二个，以此类推\n\n可选值：具体的字体名（eg.’微软雅黑’ ）或者 字体分类\n​    字体分类：浏览器自动使用该类别下的字体\n\nserif 衬线字体\nsans-serif 非衬线字体\nmonospace 等宽字体（每个字母宽度一样）\n\n\n若用户本地没有相关字体\n@font-face&#123;    /*指定字体的名字*/    font-family:&#x27;myfont&#x27;;    /*服务器中字体的路径，并确保兼容性*/    src:url(&#x27;./font/xxxx.ttf&#x27;)format(&#x27;truetye&#x27;);&#125;p&#123;    font-family:myfont;&#125;\n\n问题：加载速度、版权、字体格式\n\n\n\nfont-weight：字重\n\n可选值：\nnormal 默认值 不加粗\nbold 加粗\n100-900 九个级别（没什么用）\n\n\n\n\nfont-style：字体风格\n\n可选值：\nnormal 默认值 不斜体\nitalic 斜体\n\n\n\n\n\n字体的简写属性\nfont：字体大小 字体族；\n\ndiv&#123;    font:50px &#x27;Times New Roman&#x27;,Times,serif;&#125;\n\n\nfont：字体大小&#x2F;行高 字体族；\n\ndiv&#123;    font:50px/2 &#x27;Times New Roman&#x27;,Times,serif;&#125;/*行高可以省略不写 如果不写使用默认值*/\n\n\nfont：字重  字体风格 字体大小&#x2F;行高 字体族；\n\ndiv&#123;    font:bold italic 50px/2 &#x27;Times New Roman&#x27;,Times,serif;&#125;\n\n\n\n图标字体（iconfont）图标网站\nfontawesome：下载，将css和webfonts移动到项目中，将all.css引入网页中\niconfont（阿里）：加入购物车，项目下载，将内容移动到项目中，将iconfont.css引入网页中\n\n使用\n通过类名\n&lt;!--标签名随意，第一个类名：fas或fab，第二个类名：图标名（见文档）--&gt;&lt;i class=&quot;fas fa-bell&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fas fa-bell-slash&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fab fa-accessible-icon&quot;&gt;&lt;/i&gt;\n\n通过伪类\nli:before&#123;    /*图标编码（见文档）*/    content:&#x27;\\f1b0&#x27;;    /*图标字体族，根据fas或fab去下载的css文件里查*/    font-family:&#x27;Font Awesome 5 Free&#x27;;    /*根据fas或fab去下载的css文件里查*/    font-weight:900;&#125;\n\n通过实体\n&lt;!--实体开头&amp;结尾；中间#x加图标编码--&gt;&lt;i class=&quot;fas&quot;&gt;&amp;#f0f3x;&lt;/i&gt;\n\n\n以上以fontawesome为例\niconfont使用方法区别在于class&#x3D;”iconfont”\n\n行高（line-height）\n行高：文字占有的实际高度\n\n\n可选值：\n带单位：px、em\n不带单位：字体的倍数(默认行高为1.3左右)\n\n\n\ndiv&#123;    font-size:50px;    line-height:100px;&#125;div&#123;    font-size:50px;    line-height:2;&#125;\n\n\n字体框：字体存在的格子，设置font-size实际上就是在设置字体框的高度\n\n\n行高会在字体框的上下平均分配\n可以将行高设置为和元素高度一样的值，使单行文字居中\n\n行高还可用来设置行间距\n行间距 &#x3D; 行高 - 字体大小\n\n\n文本相关样式\ntext-align：文本的水平对齐\n\n可选值：\nleft 左对齐\nright 右对齐\ncenter 居中对齐\njustify 两端对齐\n\n\n\n\nvertical-align：文本的垂直对齐（适用于父子元素字体大小不一样）\n\n可选值：\n\nbaseline 默认值，基线对齐\ntop 顶部对齐\nbottom 底部对齐\nmiddle 居中对齐\n具体数值 px\n\n\n图片方面的应用：\n\n问题：图片默认情况下也按基线对齐（与下边框有一缝隙）\n\n\n解决：通过vertical-align取消基线对齐\n\n示例：\nimg&#123;    /*top或bottom都行，只要不是基线对齐*/    vertical-aglin:top;&#125;\n\n\n\n\ntext-decoration：文本修饰\n\n可选值：\nnone 什么都没有\nunderline 下划线\nline-through 删除下\noverline 上划线\n\n\ntext-decoration：修饰 颜色 样式\neg. text-decoration：underline red dotted；(IE浏览器不支持)\n\n\n\n\nwhite-space：处理空白\n\n可选值：\n\nnormal 正常\nnowrap 不换行\npre 保留空白（不会把换行变成空格）\n\n\n示例：\n.box2&#123;    width:200px;    /*设置不换行*/    white-space:nowrap;    /*将多余内容裁剪*/    overflow:hidden;    /*文本溢出时，溢出内容显示省略号*/    text-overflow:ellipsis;&#125;\n\n\ntext-indent：首行缩进\n\n\n","categories":["CSS"],"tags":["CSS","字体","图标","文本"]},{"title":"CSS基础（二）：继承","url":"/2022/02/27/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF/","content":"定义为一个元素设置的样式同时也会应用到它的后代元素上，发生在祖先和后代之间\n作用继承的设计是为了方便开发，利用继承可以将一些通用的样式统一设置到共同的祖先元素上，这样就只需设置一次即可让所有的元素都具有该样式\n注意并不是所有的样式都会被继承，比如：背景相关、布局相关的这些样式有不会被继承。可通过查阅文档（inherited）看是否被能够被继承\n示例&lt;p&gt;    我是一个p元素    &lt;span&gt;我是p元素中的span&lt;/span&gt;&lt;/p&gt;\n\np&#123;    /*则p和span中文字都变红*/    color:red;    /*则p背景变橙色，span背景为默认值透明，但看起来也是橙色*/    background-color:orange;&#125;\n\n","categories":["CSS"],"tags":["CSS"]},{"title":"CSS基础（五）：布局相关知识","url":"/2022/03/01/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%B8%83%E5%B1%80%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","content":"文档流（normal flow）\n网页是一个多层结构，用户只能看到最顶层\n最底下的一层称为文档流，文档流是网页的基础\n创建的元素默认都在文档流中进行排列\n元素主要有两个状态：\n\n​    在文档流中\n\n​    不在文档流中（脱离文档流）\n\n\n\n元素在文档流中的特点\n块元素\n总是独占一行（无论多宽，自上向下垂直排列）\n默认宽度：父元素的全部（即把父元素撑满）\n默认高度：被子元素（子元素）撑开\n比如：div\n\n\n行内元素\n不会独占一行，只占自身大小（从左到右水平排列）\n若一行中不能容纳下所有行内元素，则换行（与书写习惯一致）\n默认宽度：被子元素（子元素）撑开\n默认高度：被子元素（子元素）撑开\n设置宽高不能生效\n\n\n\n\n一旦块元素和行内元素脱离文档流，则不具备以上特点\n\n盒子模型（box model）\n所有元素都是一个矩形的盒子\n每个盒子都由几个部分组成：\n\n内容区（content）：内容区大小由width和height决定\n内边距（padding）：会影响盒子大小\n边框（border）：会影响盒子大小\n外边距（margin）\n\n盒子的可见框的大小，默认情况下由内容区、内边距、边框共同决定\n盒子的实际大小，还受外边距影响\n\n边框（border）\n边框宽度：border-width\n可只指定四个方向的边框宽度（顺时针）\n\n如果省略，一般为3px\n\n四个值：上 右 下 左\n\n三个值：上 左右 下\n\n两个值： 上下 左右\n\n一个值：上下左右\n\n示例：\n/*上 右 下 左*/border-width:10px 20px 30px 40px;/*上 左右 下*/border-width:10px 20px 30px;/*上下 左右*/border-width:10px 20px;/*上下左右*/border-width:10px;\n\nborder-xxx-width：\nxxx可以是 top right bottom left\n\n\n\n边框颜色：border-color\n可只指定四个方向的边框颜色：规则同上\n如果省略，默认使用color的值（color默认为black）\n\n\n边框样式：border-style\n可只指定四个方向的边框样式：规则同上\nsolid 实线、dotted 点状虚线、dashed 虚线、double 双线\n不可省略，默认值为none\n\n\nborder简写属性（最常用）\nborder：width color style; (可改变顺序)\n\n示例：\n.box1&#123;    border:10px orange solid;&#125;\n\nborder-xxx 同理\nxxx可以是 top right bottom left\n\n\n\n边框圆角：border-radius\nborder-radius\n\n四个值：左上 右上 右下 左下\n三个值：左上 右上&#x2F;左下 右下\n两个值：左上&#x2F;右下 右上&#x2F;左下 \n一个值：四个角\n\n .box1&#123;    /*半径为10px*/    border-radius:10px;&#125;.box1&#123;    /*分别指定四个角的圆角*/    border-radius:10px 20px 30px 40px;&#125;/*椭圆角*/.box1&#123;    /*水平半径为10px 垂直半径为20px*/    border-radius:10px / 20px;&#125;/*将元素设置为圆形*/.box1&#123;    border-radius:50%;&#125;\n\nborder-top-left-radius\n /*椭圆*/.box1&#123;    /*水平半径为10px 垂直半径为20px*/    border-top-left-radius:10px 20px;&#125;\n\nborder-top-right-radius\n\nborder-bottom-left-radius\n\nborder-bottom-right-radius\n\n\n\n\n内边距（padding）\n内边距：内容区和边框之间的距离\n内边距的设置会影响到盒子的大小\n背景颜色会延伸到内边距上\n\n\npadding-top\npadding-right\npadding-bottom\npadding-left\n简写padding:\n规则同border-width\n\n\n\n外边距（margin）\n外边距不会影响盒子可见框大小\n但是会影响盒子的位置（即影响盒子实际大小）\n\n\nmargin-top\n上外边距，设置一个正值，元素（自身）会向下移动\n\n\nmargin-right\n默认情况下，不会产生任何效果；总是被自动调整\n\n\nmargin-bottom\n下外边距，设置一个正值，其下边的元素会向下移动\n\n\nmargin-left\n左外边距，设置一个正值，元素（自身）会向右移动\n\n\n\n\n负值则方向相反\n\n\n简写margin:\n规则同border-width\nmargin: 0px auto (水平居中)\n\n\n\n外边距重叠问题（垂直外边距的重叠）\n相邻的垂直方向的外边距会发生重叠现象\n\n兄弟元素间的垂直外边距\n两者都是正值：取两者之间的较大值\n特殊情况：\n一正一负：取两者之和\n都负：取绝对值较大值\n\n\n兄都元素之间的外边距重叠对开发有利，不需要处理\n\n父子元素间的垂直外边距\n父子元素间的相邻外边距，子元素会传递给父元素（上外边距）\n示例：\n&lt;div class=&quot;box1&quot;&gt;    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n\n.box1&#123;    width:200px;    height:200px;    background-color:#bfa;&#125;.box2&#123;    width:100px;    height:100px;    background-color:orange;    margin-top:100px&#125;\n\n效果：\n\n\n​    \n\n处理方式：\n\n开启父元素的BFC：见CSS提升（二）：高度塌陷问题\n\n消除”相邻”条件：利用display:table(before伪类)\n.box1&#123;    width:200px;    height:200px;    background-color:#bfa;&#125;/*利用**display:table**(before伪类)*/.box1::before&#123;    content:&#x27;&#x27;;    display:table&#125;.box2&#123;    width:100px;    height:100px;    background-color:orange;    margin-top:100px&#125;\n\n效果：\n\n\n\n\n\n盒子的大小盒子的可见框大小\n默认情况：由内容区、内边距、边框共同决定\nbox-sizing：用来设置盒子尺寸的计算方式，即设置width和height的作用\n可选值：\ncontent-box：默认值，宽度和高度用来设置内容区的大小\nborder-box：宽度和高度用来设置整个盒子的可见框大小（width和height指的是内容区和边框的总大小，不包括外边距）\n\n\n\n\n\n盒子的实际大小\n还受外边距影响\n\n盒子的水平布局 （等式）\n元素在其父元素中水平方向的位置由一下几个属性共同决定：\n\nmargin-left\nborder-left\npadding-left\nwidth\npadding-right\nborder-right\nmargin-right\n\n\n一个元素在其父元素中水平布局必须要满足以下式：\n\nmargin-left + border-left + padding-left + width + padding-right + border-right + margin-right &#x3D; 其父元素内容区的宽度\n\n若相加结果使等式不成立，称为过度约束，则等式会自动调整：\n\n如果这七个值中没有为auto的情况：\n则浏览器会自动调整margin-right值以使等式满足\n\n这七个值中有三个可以设置为auto：\n\nwidth\n\nmargin-left\n\nmargin-right\n(padding不可以自动调整)\n\n\n\n若某个值为auto，则自动调整设有auto的那个属性使等式成立\n（width的值默认是auto）\n若将width和一个外边距设置为auto，则width调整为最大，设置为auto的外边距会自动为0\n若将两个外边距设置为auto，width固定，则外边距设置为相同值（居中）\n若将三个值都设置为auto，则width调整为最大，外边距都为0\n\n\n\n盒子的垂直布局 （溢出问题）\n默认情况下父元素的高度被内容撑开\n\noverflow （用于解决溢出）\n溢出：子元素的大小超过了父元素，则子元素从父元素中溢出\n解决溢出：使用overflow属性设置父元素\n可选值：\nvisible（默认值）：溢出\nhidden：溢出的内容被裁剪不会显示\nscroll：生成两个（垂直+水平）滚动条，通过滚动条查看完整内容\nauto：根据需要生成滚动条\n\n\noverflow-x：单独处理水平\noverflow-y：单独处理垂直\n\n\n以上所有内容以块元素为例(div)\n\n行内元素的盒模型\n行内元素不支持设置宽度和高度，内容区大小由内容直接决定\n行内元素可以设置padding，但是垂直方向padding不会影响页面的布局\n行内元素可以设置border，但是垂直方向border不会影响页面的布局\n行内元素可以设置margin，但是垂直方向margin不会影响页面的布局\n\ndisplay（块元素和行内元素相互转换）\n设置元素显示的类型（块元素和行内元素相互转换）\n可选值：\ninline：设置为行内元素\nblock：设置为块元素\ninline-block：设置为行内块元素（开发时不常用）\n既可以设置宽度和高度，又不会独占一行\n\n\ntable：设置为一个表格\nnone：不显示（隐藏），不占据页面位置\n\n\n应用：下拉框none—&gt;block\n\nvisibility\n设置元素显示的状态\n可选值：\nvisible：默认值，元素正常显示\nhidden：不显示（隐形），但是依然占据页面的位置\n\n\n\n轮廓（outline）\n与border区分\n\n不同点：轮廓不会影响到可见框的大小，不影响页面布局\n\n\noutline多应用于鼠标悬停时：\n.box1:hover&#123;    outline:10px red solid;&#125;\n\n阴影（box-shadow)\n不影响页面布局\n\n语法：box-shadow：水平偏移量 垂直偏移量 模糊半径颜色\n\n水平偏移量：设置阴影水平位置，正值向右移动，负值相反\n垂直偏移量：设置阴影垂直位置，正值向下移动，负值相反\n模糊半径：越大越模糊\n颜色：rgba(0，0，0，.3)\n\n\n示例：\n.box1&#123;    box-shadow:10px 10px 50px rgba(0,0,0,.3)&#125;\n\n浏览器的默认样式\n浏览器会为元素设置默认样式，开发时需要去除默认样式（pc端）\n\n去除默认样式bady&#123;    magin:0;&#125;p&#123;    magin:0;&#125;ul&#123;    magin:0;    padding:0;    list-style:none;/*去除项目符号*/&#125;/*通常情况下简单写法*/*&#123;    margin:0;    padding:0;&#125;ul&#123;    list-style:none;/*去除项目符号*/&#125;\n\n最完美的写法，通过引入重置样式表\n\nreset.css：直接去除浏览器的默认样式\nnormalize.css：对默认样式进行了统一\n\n","categories":["CSS"],"tags":["CSS","盒子模型","块元素","行内元素"]},{"title":"CSS基础（六）：背景","url":"/2022/03/03/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E8%83%8C%E6%99%AF/","content":"背景相关样式\nbackground-color：背景颜色\n\nbackground-image ：背景图片\n\nurl(.&#x2F;img&#x2F;1.png) 或 url(‘.&#x2F;img&#x2F;1.png’)\n\n可同时设置背景颜色和背景图片\n\n若背景图片小于元素，则自动平铺\n\n若背景图片大于元素，则裁剪\n\n渐变：\n\n线性渐变：linear-gradient（方向，开头颜色，结束颜色）\n方向：to left,to right,to bottom, to top, xxxdeg(度数)，.xxturn(圈数)\n可指定多种颜色，默认情况下平均分，也可手动指定渐变情况\n\n平铺线性渐变：repeating-linear-gradient()\n\n径向渐变：radial-gradient（形状 at 位置，颜色 位置，颜色 位置，颜色 位置）\n可手动指定渐变的大小、渐变的位置\n\n\n\n\n\nbackground-repeat：背景图片重复方式\n\n可选值：\nrepeat 默认值，沿x轴、y轴双方向重复\nrepeat-x 沿x轴重复\nrepeat-y 沿y轴重复\nno-repeat 不重复\n\n\n\n\nbackground-positon：背景图片位置\n\n方位词：top left right bottom center 组合（九宫格）\nbackground-positon: top lleft\n同时指定两个值，若只写一个则第二个默认center\n\n偏移量：水平方向偏移量 垂直方向偏移量\nbackground-positon:100px 100px \n实际开发中，用负值较多\n\n应用：CCS-Sprite技术（雪碧图or精灵图）\n解决浏览器第一次加载时图片闪烁的问题\n将多个小图片统一保存到一个大图片中，通过调整background-position来切换显示的图片\n\n\n\n\nbackground-clip：背景的范围\n\n可选值：\nborder-box 默认值，背景会出现在边框的下面\npadding-box 背景不会出现在边框下面，只出现在内容区和内边距\ncontent-box 背景只会出现在内容区\n\n\n\n\nbackground-origin：背景图片的偏移量计算的原点\n\n可选值：\npadding-box 默认值，原点从内边距处开始计算\ncontent-box 原点从内容区处开始计算\nborder-box 原点从边框处开始计算\n\n\n\n\nbackground-size：背景图片的大小\n\n可选值：\n\n宽度 高度 （100% auto）\n如果只写一个，则第二个值默认auto，等比例缩放\n\ncover 图片的比例不变，将元素铺满\n\ncotain 图片的比例不变，将图片在元素中完整显示\n\n\n\n\n\nbackground-attachment：背景图片是否跟随元素移动（父元素设置overflow：auto出现滚动条时）\n\n可选值：\nscroll 默认值，背景图片会跟随元素移动\nfixed 背景图片会固定在页面中，不会随元素移动\n\n\n\n\nbackground 背景相关简写属性\n.box&#123;    background：#bfa url(&#x27;./img/1.png&#x27;)  center center/contain border-box content-box no-repeat;&#125;\n\n没有顺序要求，可省略\n注：\n\nbackground-size必须卸载background-position的后面，并且用&#x2F;隔开：background-size&#x2F;background-position\nbackground-origin要在background-clip前面\n\n\n\n","categories":["CSS"],"tags":["CSS","背景"]},{"title":"CSS基础（四）：单位","url":"/2022/03/01/CSS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BD%8D/","content":"长度单位\n像素 （px）\n不同屏幕的像素大小不同，像素越小的屏幕显示效果越清晰\n同样的200px在不同的设备下显示效果不一样\n\n\n百分比 （%）\n将其属性值设置为相对于其父元素属性的百分比\n设置百分比可以使子元素跟随父元素的改变而改变\n\n\nem\nem是相对于元素（自身）的字体大小来计算\n\n1em &#x3D; 1 font-size\n1 font-size &#x3D; 16px（默认）\n\nem会根据字体大小的改变而改变\n\n示例：\n/*盒子大小为160px*/.box1&#123;    font-size:16px;    width:10em;    height:10em;   \tbackground-color:greenyellow;&#125;/*盒子大小为200px*/.box2&#123;    font-size:20px;    width:10em;    height:10em;   \tbackground-color:greenyellow;&#125;\n\n\nrem\nrem是相对于根元素（html）的字体大小来计算\n\n在移动端用得挺多\n\n示例：\n/*盒子大小为160px*/html&#123;    font-size:30px;&#125;/*盒子大小为300px*/.box1&#123;    width:10rem;    height:10rem;   \tbackground-color:greenyellow;&#125;\n\n\nvw\n表示视口宽度（viewport width)\n\n100vw &#x3D; 一个视口的宽度、1vw &#x3D; 1%视口宽度\n\n与百分比不同：vw总是参考于视口宽度\n\n设计图的宽度：\n二倍图：750px，三倍图：1125px\n\n\n结合vm和rem来表示长度\n@total-width:750;html&#123;    //设置rem的比值，*40是因为浏览器不支持比12px小的字体    font-size:100vw/@total-width * 40;&#125;.box1&#123;    width:(175/40)rem;&#125;\n\n\n\n颜色单位\n颜色名\n比如：red、orange、yellow、blue、green……\n\n\nRGB\n语法：rgb(红，绿，蓝) \n\n取值范围：0~255\n\n特殊值：rgb（0，0，0）黑色\n​                rgb（255，255，255）白色\n\n\n\nRGBA\n语法：rgb(红，绿，蓝，透明度)\n\n特殊值：rgb（176,199,167，1）完全不透明\n​                rgb（176,199,167，0）完全透明\n​                rgb（176,199,167，.5）半透明\n\n\n\n十六进制的RGB\n语法：#红绿蓝 \n\n取值范围：00~ff  \n\n特殊值：#ff0000 红色\n​                #00000 白色\n\n如果颜色两位两位重复可以简写：\n#aabbcc –&gt; #abc\n#aabbcd 不能简写\n\n\n\nHSL、HSLA\nH 色相：0~360\nS 饱和度：0%~100% （0%灰）\nL 亮度：0%~100%（0%黑，50%正，100%白）\nA 透明度\n\n\n\n","categories":["CSS"],"tags":["CSS","单位","移动端"]},{"title":"CSS提升（一）：浮动","url":"/2022/03/02/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%B5%AE%E5%8A%A8/","content":"浮动的简介\n通过浮动可以使一个元素向其父元素的左侧或右侧移动，使用float属性设置元素的浮动\n五三理解：相当于ps中新建一个图层\n\n\n可选值：\nnone：默认值，元素不动\nleft：元素向左浮动\nright：元素向右浮动\n\n\n注意：\n设置浮动以后，水平布局的等式不需要强制成立（例如：设置float:left，右外边距为0）\n元素会完全从文档流中脱离，不占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动\n\n\n特点：\n浮动元素会完全脱离文档流，不再占据文档流中的位置\n设置浮动后元素会向父元素的左侧或右侧移动\n浮动元素默认不会从父元素中移除\n浮动元素不会超过它前面的其它浮动元素\n如果浮动元素的上面时一个没有浮动的块元素，则浮动元素无法上移\n\n\n作用：让页面中的元素可以水平排列，制作水平布局\n\n浮动的特点\n浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，可利用浮动来设置文字环绕图片的效果\n\n浮动后，从文档流中脱离，元素的特点也会发生变化\n\n\n脱离文档流后的特点块元素\n不再独占页面的一行\n宽度和高度被内容撑开（默认情况）\n\n行内元素\n变成块元素，特点和块元素一样\n\n\n脱离文档流以后，不需要再区分块元素和行内元素\n\n","categories":["CSS"],"tags":["CSS","float"]},{"title":"CSS提升（七）：响应式布局","url":"/2022/03/07/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/","content":"\n响应式布局：网页可根据不同的设备或窗口大小呈现出不同的效果\n关键：媒体查询\n​    通过媒体查询，可以为不同的设备，或设备不同状态来分别设置样式\n\n媒体查询语法：@media 查询规则{}\n媒体类型\nall 所有设备\n\nprint 打印设备\n\nscreen 带屏幕的设备\n\nspeech 屏幕阅读器\n可以使用，连接多个媒体类型，或的关系\n可以再媒体类型前添加一个only，表示只有（为了兼容一些老版本的浏览器）\n@media all&#123;    body&#123;        background-color:#bfa;    &#125;&#125;@media print,screen&#123;    body&#123;        background-color:#bfa;    &#125;&#125;@media only screen&#123;    body&#123;        background-color:#bfa;    &#125;&#125;\n\n媒体特性\nwidth 视口的宽度\nheight 视口的高度 (一般不考虑)\nmin-width 视口最小宽度 (视口大于指定宽度时生效)\nmax-width 视口最大宽度 (视口小于指定宽度时生效)\n\n/*视口等于500px时生效*/@media (width:500px)&#123;    body&#123;        background-color:#bfa;    &#125;&#125;/*视口大于500px时生效*/@media (min-width:500px)&#123;    body&#123;        background-color:#bfa;    &#125;&#125;/*视口小于500px时生效*/@media (max-width:500px)&#123;    body&#123;        background-color:#bfa;    &#125;&#125;/*视口大于500px或小于700px时生效*/@media (min-width:500px),(max-width:700px)&#123;    body&#123;        background-color:#bfa;    &#125;&#125;/*视口大于500px且小于700px时生效*/@media only screen (min-width:500px)and(max-width:700px)&#123;    body&#123;        background-color:#bfa;    &#125;&#125;\n\n样式切换的分界点，称为断点（布局大变化）\n\n常用断点：\n\n小于768 超小屏幕 max-width&#x3D;768px\n大于768 小屏幕 min-width&#x3D;768px\n大于992 中型屏幕 min-width&#x3D;992px\n大于1200 大屏幕 min-width&#x3D;1200px\n\n@media only screen&#123;    @media (min-width:768px)&#123;        .box1&#123;                    &#125;    &#125;&#125; \n\n","categories":["CSS"],"tags":["CSS","响应式布局","布局"]},{"title":"CSS提升（三）：定位相关知识","url":"/2022/03/02/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AE%9A%E4%BD%8D%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","content":"\n定位：一种更加高级的布局手段\n通过定位可以将元素摆放到页面的任意位置\nposition属性\n\n\n可选值：\nstatic 默认值，元素是静止的没有开启定位\nralative 相对定位\nabsolute 绝对定位\nfixed 固定定位\nsticky 粘滞定位\n\n\n\n\n注：实际开发中，定位并不会大面积使用，整体上不用定位，定位通常用在细节上的微调\n\n相对定位\nposition：relative\n\n特点\n相对定位 若不设置偏移量，元素不发生任何变化\n\n\n偏移量：开启定位后，偏移量可以用来设置元素位置（与margin不同：不会影响别的元素）\n​    top、bottom：垂直方向定位（使用其一）\n​    left、right：水平方向定位（使用其一）\n*注：以上值要生效必须开启定位，若没开启定位，设置偏移量无效。\n\n\n相对定位 元素是参照于元素在文档流中的位置进行定位\n相对定位 会提高元素的层级\n相对定位 不会使元素脱离文档流\n相对定位 不会改变元素的性质（块还是块，行内还是行内）\n\n\n形象理解：灵魂出窍，元素肉体（偏移前）还占据页面位置，元素灵魂（偏移后）挪动了\n\n绝对定位\nposition：absolute\n\n特点\n绝对定位 若不设置偏移量，元素的位置不发生任何变化\n\n绝对定位 元素是相对于其包含块进行定位\n\n\n\n包含块（containing block）：\n​    正常情况下：包含块是离当前元素最近的祖先块元素\n​    绝对定位下：包含块是离当前元素最近的开启了定位的祖先元素；若所有祖先均未开启定位，则包含块是根元素。\n\n\n绝对定位 会提高元素的层级\n绝对定位 会使元素脱离文档流（不占据页面位置）\n绝对定位 会改变元素的性质（行内变成块，块的宽高被内容撑开）\n\n绝对定位元素布局水平方向布局当开启绝对定位后，水平方向的布局等式需要添加left和right\n\nleft + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right&#x3D; 其包含块内容区的宽度\n\n\n如果9个值中没有auto则自动调整right值使等式两端满足\n\n如果有auto则自动调整auto的值\n可以调整auto的值：margin width left right\n\nleft、right默认值为auto，默认自动调整这两个值\n所以绝对定位下，需要设置居中时：\nmargin-left:auto;margin-right:auto;left：0；right：0；\n\n垂直方向布局当开启绝对定位后，垂直方向的布局等式也需要满足\n\ntop + margin-top+ border-top+ padding-top+ width + padding-bottom+ border-bottom+ margin-bottom+ bottom&#x3D; 其包含块内容区的高度\n\n【面试】实现绝对定位元素在包含块中水平、垂直都居中：\nmargin：auto;left：0；right：0；top:0;bottom:0;/*注意包含块要开启定位*/\n\n\n子元素在父元素中的定位：父元素相对，子元素绝对\n\n父元素相对：是为了在不脱离文档流的情况下开启定位（保证父元素周围的元素布局不混乱）\n子元素绝对：和其它子元素一起脱离文档流，避免互相影响\n\neg. 轮播图（父元素）中的原点（子元素）\n固定定位\nposition：fixed\n\n特点\n固定定位 是特殊的绝对定位，大部分特点和绝对定位相同\n唯一与绝对定位不同的地方：\n固定定位 元素是参考于浏览器的视口进行定位（不会随网页的滚动条移动，eg广告）\n\n\n\n粘滞定位\nposition：sticky \n\n特点\n粘滞定位 兼容性不太好（一般不采用，通常使用js来实现）\n粘滞定位 和相对定位特点基本一致\n与相对定位不同的地方：\n粘滞定位 可以在元素到达某个位置时将其固定（eg，导航栏）\n\n\n\n元素的层级\n对于开启了定位的元素，可以通过z-index属性来指定元素的层级\n\n\n语法：z-index：整数\n值越大元素的层级越高，越优先显示\n\n若元素层级一样，则优先显示html中结构靠下的元素\n\n祖先元素的层级再高也不会盖住后代元素\n\n\n","categories":["CSS"],"tags":["CSS","定位","元素层级"]},{"title":"CSS提升（二）：高度塌陷问题","url":"/2022/03/02/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/","content":"\n现象：在浮动布局中，父元素的高度默认被子元素撑开，当子元素浮动后，其从文档流中脱离，将无法撑起父元素的高度，导致父元素的高度丢失，父元素下的元素会自动上移，导致页面布局混乱。\n\n\n解决方法将父元素高度写死\n缺点：容易导致内容溢出，或内容空洞\n\nBFC ( Block Formatting Context ) 块级格式化环境\nBFC是CSS中一个隐含的属性\n为元素开启BFC：元素变成独立的布局区域\n\n\n开启BFC的元素特点：\n\n当前元素不会被浮动元素所覆盖\n父元素开启BFC外边距不会和子元素重叠\n父元素开启BFC可以包含浮动的子元素（解决高度塌陷问题）\n\n\n开启BFC方式：（均为间接开启，都有些副作用）\n\n设置浮动\nfloat:left （宽度丢失）\n\n将元素设置为行内块元素\ndisplay:inline-block (宽度丢失)\n\n将overflow设置为非visible的值 (最常用)\n\noverflow：scroll\noverflow: auto\noverflow: hidden（最常用）\n\n\n\n\n\nclear (完美方式)\n不希望某个元素因为其它元素浮动的影响而改变位置，可以通过clear属性来清楚浮动元素对当前元素所产生的影响\n\n\n作用：清除浮动元素对当前元素所产生的影响\n\n可选值：\n\nleft：清除左侧浮动元素对当前元素的影响\nright：清除右侧浮动元素对当前元素的影响\nboth：清楚两侧中最大影响的那一侧\n\n\n原理：设置clear以后，浏览器会自动为元素添加一个上外边距，使其位置不受其他元素影响\n\n示例：\n&lt;div class=&quot;box1&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;box2&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;box3&quot;&gt;3&lt;/div&gt;\n\n.box1&#123;    width:200px;    height:200px;    background-color:#bfa;    /*左浮动*/    float:left;&#125;.box2&#123;    width:200px;    height:200px;    background-color: yellow;    /*右浮动*/    float:right;&#125;.box3&#123;    width:200px;    height:200px;    background-color: orange;    /*消除浮动影响*/    clear：both;&#125;\n\n效果：\n\n\n\n使用after伪类解决高度塌陷问题（clear解决）\n参考教程：【尚硅谷】Web前端零基础入门HTML5+CSS3基础教程丨初学者从入门到精通_哔哩哔哩_bilibili\n\n示例：\n\n\n&lt;div class=&quot;box1&quot;&gt;    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n\n.box1&#123;    border 10px red solid;&#125;.box2&#123;    width:100px;    height:200px;    background-color: #bfa;    /*开启了浮动，导致父元素高度塌陷*/    float:left;&#125;.box1::after&#123;    content:&#x27;&#x27;;    /*将伪元素（行内元素）转换为块元素*/    diaplay:block;   /*或者用display:table*/    /*消除浮动影响*/    clear：both;&#125;\n\n\n效果：\n消除前：\n\n\n\n\n\n消除后：\n\n\n.clearfix(同时解决高度塌陷和外边距重叠问题).clearfix::before,.clearfix::after&#123;    /*前两行解决外边距重叠*/    content:&#x27;&#x27;;    /*将伪元素（行内元素）转换为块元素*/    display:table;    /*消除浮动影响*/    clear：both;    /*后两行解决高度塌陷*/&#125;\n\n","categories":["CSS"],"tags":["CSS","高度塌陷","BFC","clear"]},{"title":"CSS提升（五）:less","url":"/2022/03/07/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Aless/","content":"less简介\nless是一门css的预处理语言\nless是css的增强版，可通过它编写更少的代码实现更强大的样式\nless语法大体上和css语法一致，但增添了许多对css的扩展\n浏览器无法直接执行，需通过编译把less转化成css\n\ncss原生变量、函数html&#123;    --color：#bfa;    --length:200px;&#125;.box1&#123;    width:var(--length);    height:var(--length);    backgound-color:var(--color);&#125;.box2&#123;    width:calc(200px*2);    height:var(--length);    backgound-color:var(--color);&#125;\n\n缺点：\n浏览器兼容性不好\n\nless的语法//less的注释不会解析到css中/*css的注释会解析到css中*/.box1&#123;    background-color:#bfa;    .box2&#123;        background-color:#ff0;        .box4&#123;            background-color:red;        &#125;    &#125;    .box2&#123;        background-color:#orange;    &#125;&#125;\n\n编译成css：\n/*css的注释会解析到css中*/.box1&#123;    background-color:#bfa;&#125;.box1 .box2&#123;    background-color:#ff0;&#125;.box1 .box3&#123;    background-color:#orange;&#125;.box1 .box2 .box3&#123;    background-color:red;&#125;\n\nless的变量\n变量的语法：@变量名\n\n示例：\n@a:100px;@b:#bfa;@c:box6.box5&#123;    //直接使用则以 @变量名 形式使用    width:@a;    color:@b;&#125;    //作为类名，或者一部分值使用时以 @&#123;变量名&#125; 形式使用.@&#123;c&#125;&#123;    backgound-imag：url(&quot;@&#123;c&#125;/1.png&quot;)&#125;.box2&#123;    color: red;    background-color:$color;&#125;\n\nless中父元素和扩展父元素.box1&#123;    .box2&#123;        color:red;    &#125;    //子元素选择器    &gt;.box3&#123;       color:red;    &#125;    //为box1设置hover    //&amp; 表示外围父元素    &amp;:hover&#123;        color:orange;    &#125;&#125;\n\n编译成css：\n.box1 .box2&#123;    color:red;&#125;.box1&gt;.box3&#123;    color:red;&#125;.box1:hover&#123;    color:orange;&#125;\n\n扩展extend、mixin.p1&#123;    width:10px;    height:20px;&#125;.p2:extend(.p1)&#123;    color:red;&#125;\n\n编译成css：\n.p1&#123;    width:10px;    height:20px;&#125;.p2&#123;    width:10px;    height:20px;    color:red;&#125;.p3&#123;    width:10px;    height:20px;&#125;\n\nless中的混合函数.p1&#123;    width:10px;    height:20px;&#125;//mixin 混合.p3&#123;    .p1();&#125; //css中不会显示p4，相当于建立一个模板.p4()&#123;    width:100px;    height:100px;   \tbackground-color:#bfa;&#125;.p5&#123;    .p4(); //括号也可不写 &#125;\n\n编译成css：\n.p1&#123;    width:10px;    height:20px;&#125;.p3&#123;    width:10px;    height:20px;&#125;.p5&#123;    width:100px;    height:100px;   \tbackground-color:#bfa;&#125;\n\n实际用法：在混合函数中可以设置变量\n.test(@w,@h,@bg-color)&#123;    width:@w;    height:@h;    border:1px solid @bg-color;&#125;div&#123;    //调用混合函数，按顺序传递参数    .test(200px,300px,#bfa);    //不按顺序，但需指明关键字    .test(@bg-color:#bfa,@h:300px,@w:200px);&#125;\n\n编译成css：\ndiv&#123;    width:200px;    height:300px;    border:1px solid #bfa;&#125;\n\nless中的引入//将其它的less引入当前的less@import &quot;syntax2.less&quot;\n\n","categories":["CSS"],"tags":["CSS","less","变量"]},{"title":"CSS提升（六）：弹性盒flex","url":"/2022/03/07/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%BC%B9%E6%80%A7%E7%9B%92flex/","content":"\nflex(弹性盒、伸缩盒)\n是css中又一种布局手段，它主要用来代替浮动过来完成页面的布局\nflex可以使元素具有弹性，让元素可以跟随页面大小的改变而改变\n\n弹性容器\n要使用弹性盒，必须将一个元素设置为弹性容器\n\n\ndisplay：flex 设置为块级弹性容器（大多情况用这个）\ndisplay：inline-flex 设置为行内弹性容器\n\nflex-direction 指定容器中弹性元素的配列方式\n\n主轴：弹性元素的排列方向\n侧（辅）轴：与主轴垂直方向的轴\n\n可选值：\n\nrow 默认值 水平排列（左向右）\n主轴：自左向右\n\nrow-reverse 水平排列（右向左）\n主轴：自右向左\n\ncolumn 纵向排列（上向下）\n\ncolumn-reverse 纵向排列（下向上）\n\n\n\n\n\nflex-wrap 设置弹性元素是否在弹性容器中自动换行\n\n可选值\nnawrap 默认值，不会自动换行\nwrap 元素沿着辅轴方向自动换行\nwrap-reverse 元素沿着辅轴反方向换行\n\n\n\n\nflex-flow   wrap和direction的简写属性\nflex-flow：row wrap\n\njustify-content 分配主轴上的空白空间\n\n可选值：\nflex-start 元素沿着主轴起边排列\nflex-end 元素沿着主轴终边排列\ncenter 元素居中排列\nspace-around 空白分布到元素两侧\nspace-between空白分布到元素之间\nspace-evenly 空白分布到元素的单侧（兼容性不高）\n\n\n\n\nalgin-items 元素在辅轴上如何对齐\n\n可选值：\nstretch 默认值 将元素的长度设置为相同的值（同一行的高度相同）\nflex-start 元素不会拉伸，沿着辅轴起边对齐\nflex-end 元素不会拉伸，沿着辅轴终边对齐\ncenter 元素不会拉伸，居中对齐\nbaseline 基线对齐（文本基线）\n\n\n用于弹性元素：align-self 用来覆盖当前弹性元素上的align-items\n\n\nalign-content 分配辅轴上的空白空间\n\n可选值同justify-content\n\n弹性元素\n\n\n弹性容器的子元素是弹性元素（弹性项），必须是直接子元素，后代不算\n一个元素可以同时是弹性容器和弹性元素\n\n\nflex-grow 指定弹性元素的伸展系数（当父元素有多余空间时，子元素如何伸展）\n\n父元素的剩余空间，会按照弹性元素的伸展比例进行分配\n默认值为0（不伸展）\n\n\nflex-shrink 指定弹性元素的收缩系数（当父元素空间不足时，子元素如何收缩）\n\n默认值为1 (等比例收缩)\n值为0 （不收缩，溢出）\n缩减多少是根据 缩减系数 和 元素大小来计算\n\n\n\nflex-basis 元素基础长度（相当于弹簧静止时的长度）\n\n如果主轴是横向，则该值指定元素的宽度\n如果主轴是纵向，则该值指定元素的高度\n\n可选值：\n\nauto，参考元素自身的高度或宽度\n具体数值\n\n\n\n\nflex 简写属性\n\n顺序：增长系数 缩减系数 基础长度；\n可选值：\ninitial：相当于flex：0 1 auto （默认值，不可伸展可收缩））\nauto：相当于flex：1 1 auto （可伸展可收缩）\nnone：相当于flex：0 0 auto （弹性元素没有弹性）\n\n\n\n\norder 弹性元素排列顺序\n\n数值越大排越后面\n\n\n\n","categories":["CSS"],"tags":["CSS","布局","弹性盒"]},{"title":"CSS提升（四）：动画","url":"/2022/03/06/CSS%E6%8F%90%E5%8D%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB/","content":"过渡\ntransition-property：指定要执行过渡的属性\n\n例：transition-property：width\n\n多个属性间使用，隔开\n\n如果所有属性都需要过渡，则使用all关键字\n\n大部分属性都支持过渡效果（只要是数值可以计算，px，角度，颜色）\n\n必须从一个有效数值向另一个有效数值进行过渡，auto无效\n\n\n\ntransition-duration：指定过渡效果持续时间\n\n例：transition-duration：2s，1000ms\n时间单位：s 和 ms，1s&#x3D;1000ms\n不同属性的过渡时间之间用，隔开\n\n\ntransition-timing-fuction：过渡的时序函数\n\n可选值：\n\nease 默认值，慢速开始，先加速，再减速\n\nlinear 匀速运动\n\nease-in 加速运动\n\nease-out 减速运动\n\nease-in-out 先加速 后减速\n\ncubic-bezier（）时序函数（贝塞尔曲线）\nhttps://cubic-bezier.com\n\nsteps（）分步执行过渡效果\n可以设置第二个值：\nend，在时间结束时执行过渡（默认值）\nstart，在时间开始时执行过渡\n\n\n\n\n\ntransition-delay：过渡效果的延迟（等待一段时间后在执行过渡）\n例：transition-delay：2s\n\ntransition 简写属性\n如果要写延迟，则两个时间中第一个是持续时间。\n.box1&#123;    height:0;    /*当高度属性值发生变化时，会花0.3s完成效果*/    transtition:height 0.3s;&#125;.box2&#123;    height:0;    /*当所有样式发生变化时，会花0.3s完成效果*/    transtition:all 0.3s;&#125;\n\n动画\n动画和过渡类似，都可实现动态效果\n​    不同的是过渡需要在某个属性发生变化时才会触发（需要交互）\n​    动画可以自动触发动态效果\n设置动画效果，必须要先设置一个关键帧，关键帧设置了动画执行的每个步骤\n\n\n示例：\n@keyframes test&#123;    /*from表示动画开始位置 也可以使用0%*/    from&#123;        margin-left:0;    &#125;    /*to表示动画结束位置 也可以使用100%*/    to&#123;        margin-left:700px;    &#125;&#125;.box2&#123;    /*对当前元素生效的关键帧的名字*/    animation-name:test;    animation-duration:2s;    animation-delay：2s;        /*动画执行次数      可选值：        次数，        infinite 无限执行  */    animation-iteration-count:20;    /*动画运行方向      可选值：        normal 默认值 从from到to    \treverse 从to到from    \talternate 从from到to 重复执行动画时反向执行    \talternate-reverse 从to到from 重复执行动画时反向执行*/    animation-direction：alternate-reverse;     /*动画执行状态      可选值：        running 默认值 执行    \tpaused 暂停 */    animation-play-state：paused;    /*动画填充模式      可选值：        none 默认值 执行完毕元素回到原来的位置    \tforwards 执行完毕元素停在结束位置     \tbackwards 动画延时等待时，元素就会处于开始位置    \tboth 结构了forwards和backwards*/    animation-fill-mode：alternate-reverse;&#125;\n\nanimation简写属性\n如果要写延迟，则两个时间中第一个是持续时间。\n\n\n变形\n改变元素的形状或位置\n​    不会影响到页面的布局（类似相对定位）\n\n\ntransform 设置元素的变形效果\n\n可选值（函数）：\n\n平移：\ntranslateX() 沿着x轴方向平移 translateX(100px) \ntranslateY() 沿着y轴方向平移 translateX(50%)\ntranslateZ() 沿着z轴方向平移\n​    默认情况下，网页不支持透视\n​    若要看见z轴平移效果，需设置网页的视距html{perspective：800px；}\n百分比是相对于元素自身计算的\n\n旋转：旋转会改变xyz轴的方向\nrotateX() 沿x轴旋转\n​    若要看见x、y轴旋转效果，需设置网页的视距html{perspective：800px；}\nrotateY() 沿y轴旋转\nrotateZ() 沿z轴旋转 rotateZ(45deg)\n\n平移+旋转：\n.box1&#123;    transform:rotateY(180deg) translate(400px);&#125;\n\n缩放：\nscaleX() 水平方向缩放\nscaleY() 垂直方向缩放\nscale() 两个方向都缩放\nscaleZ() 沿z轴缩放（立体的才有效果）\n\n\n\n\n\ntransform-style：preserve-3d；设置3D变形效果\n\ntransform-orgin 设置变形的原点\n\ncenter 默认值\n数值px 数值px\n\n\n\n","categories":["CSS"],"tags":["CSS","动画","过渡","变形"]},{"title":"HTML基础（一）：meta标签","url":"/2022/02/26/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Ameta%E6%A0%87%E7%AD%BE/","content":"格式&lt;head&gt;    &lt;meta&gt;&lt;/head&gt;\n\n作用设置网页中的元数据，用于浏览器渲染网页，元数据对用户是不可见的。\n\ncharset：指定网页的字符集编码\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n\nname：指定的数据的名称\n\nkeywords：网页的关键字，搜索引擎的搜索关键词\n&lt;meta name=&quot;keywords&quot; content=&quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东&quot;&gt;\n\ndescription：网页的描述，搜索结果简介\n&lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;/&gt;\n\n\n\nviewport：设置视口大小（为适配移动端）\n&lt;!--设置的是css像素，与物理像素区分--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width:100px&quot;&gt;\n\n\n完美视口：\n每一款移动设备设计时，都会有一个最佳像素比（ css像素&#x2F;物理像素）。设置视口width，使之与物理像素的像素比为该值，即可得到最佳效果\n\n不同移动设备的完美视口不同：\n\n\n&lt;!--将网页的视口设置为完美视口--&gt;&lt;!--利用device-width设置视口大小--&gt;&lt;!--initial-scale=1.0，防止横竖屏切换混乱--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width，initial-scale=1.0&quot;&gt;\n\n\ncontent：指定的数据的内容\n\nhttp-equiv：将页面重定向到另一个网站\n&lt;!--三秒后跳转到百度--&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=https://www.baidu.com&quot;&gt;\n\n","categories":["HTML"],"tags":["移动端","HTML","meta"]},{"title":"HTML基础（二）：相对路径","url":"/2022/02/26/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/","content":"含义​    .&#x2F; 表示当前文件所在的目录，可省略不写\n&lt;!--两者都指的是当前目录下的target文件--&gt;&lt;a href=&quot;./target.html&quot;&gt;&lt;/a&gt;&lt;a href=&quot;target.html&quot;&gt;&lt;/a&gt;\n\n​    ..&#x2F; 表示当前文件所在的目录的上一级目录，可多次使用\n&lt;!--指的是当前目录的上一级目录下的target文件--&gt;&lt;a href=&quot;../target.html&quot;&gt;&lt;/a&gt;&lt;!--指的是当前目录的上两级目录下的target文件--&gt;&lt;a href=&quot;../../target.html&quot;&gt;&lt;/a&gt;\n","categories":["HTML"],"tags":["HTML","路径"]},{"title":"HTML基础（三）：表格","url":"/2022/03/05/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%A1%A8%E6%A0%BC/","content":"\n基本格式：\n&lt;!--创建表格--&gt;&lt;table&gt;     &lt;!--行--&gt;    &lt;tr&gt;        &lt;!--列（单元格）--&gt;        &lt;td&gt;&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;!--行--&gt;    &lt;tr&gt;        &lt;!--列（单元格）--&gt;        &lt;td&gt;&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;        &lt;td&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;\n\n属性：\n\ncolspan 横向合并单元格\nrowspan 纵向合并单元格\n\n\n注：\n\ntr不是table的子元素：如果表格中没有使用tbody，而是直接使用tr，那么刘阿龙年起会自动创建一个tbody，并且将tr全部放到tbody。\n\n\n\n长表格\n格式：\n&lt;!--创建长表格\t头部 thead\t主题 tbody\t底部 tfoot\t三者顺序调换时不改变结构--&gt;&lt;table&gt;     &lt;thead&gt;        &lt;tr&gt;            &lt;!--头部加粗--&gt;            &lt;th&gt;&lt;/th&gt;            &lt;th&gt;&lt;/th&gt;            &lt;th&gt;&lt;/th&gt;        &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody&gt;        &lt;tr&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/tbody&gt;    &lt;tfoot&gt;        &lt;tr&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;            &lt;td&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/tfoot&gt;&lt;/table&gt;\n\n表格的样式\nborder-spacing 指定边框之间的距离\n\nborder-collapse：collapse 设置边框的合并\n\n不同行不同颜色：\ntr:nth-child(odd)&#123;    background-color:#bfa;&#125;\n\nvertical-align 指定元素垂直方向位置\n\nmiddle 默认情况下元素在td中是垂直居中的\n\n可利用以上特性，将div转换为单元格进行垂直居中\n示例：\n&lt;div class=&quot;box1&quot;&gt;    &lt;div class=&quot;box2&quot;&gt;    &lt;/div&gt;&lt;/div&gt;\n\n.box1&#123;    width:300px;    height:300px;    background-color:orange;    /*将元素设置为单元格*/    display:tatle-cell;    vertical-align:middle;/*子元素垂直居中*/&#125;.box2&#123;    width:100px;    height:100px;    background-color:yellow;    /*水平居中*/    margin:0 auto;&#125;\n\n\n\n","categories":["HTML"],"tags":["HTML","表格"]},{"title":"HTML基础（四）：表单","url":"/2022/03/05/HTML%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%A1%A8%E5%8D%95/","content":"\n表单用于将本地的数据提交给服务器\n\n\nform 创建表单\n\n属性：\n\naction 提交的服务器地址\n\n\n表单项：\n\ninput （自结束标签）\n\ntype&#x3D;”text” 文本框\n数据要提交服务器，必须为元素指定name值（相当于变量）\nname&#x3D;”username”\nvalue&#x3D;”xxx” 默认值\nautocomplete&#x3D;”off” 自动补全（可直接放在form属性中）\nrendonly 将表单项设置为只读，数据会提交\ndisable 将表单项设置为禁用，数据不会提交\nautofucus 自动获取焦点，刷新时光标出现\n\ntype&#x3D;”password” 密码框\nname&#x3D;”userpsword”\n\ntype&#x3D;”radio” 单选按钮（选择框）\nname&#x3D;”hello”\n&lt;input type=&quot;radio&quot; name=&quot;hello&quot; value=&quot;a&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;hello&quot; value=&quot;b&quot; checked&gt;&lt;!--有相同属性name才能单选--&gt;\n\nvalue&#x3D;”a” 指定选择的值（相当于变量值，选择哪个提交时hello就等于哪个值）\nchecked 默认选中\n\ntype&#x3D;”checkbox” 多选按钮（选择框）\n同上\n\ntype&#x3D;”color” 调色板\n\ntype&#x3D;”email” 邮箱、type&#x3D;”tel”手机号 （在移动端比较好用）\n提供提示，一般用js代替此效果\n\ntype&#x3D;”submit”  提交按钮\nvalue&#x3D;”按钮显示名字”\n\ntype&#x3D;”reset” 重置按钮\n将内容改成默认值\n\ntype&#x3D;”button”  普通按钮\n结合js完成提交\n\n\n\nbutton 按钮 （成对标签，可在中间放图片，把图片当作按钮）\n\ntype&#x3D;”submit” 提交按钮\ntype&#x3D;”reset” 重置按钮\ntype&#x3D;”button” 普通按钮\n\n\nselect 下拉列表 \n&lt;select name=&quot;haha&quot;&gt;    &lt;option value=&quot;i&quot;&gt;&lt;/option&gt;    &lt;option selected value=&quot;ii&quot;&gt;&lt;/option&gt;    &lt;option value=&quot;iii&quot;&gt;&lt;/option&gt;&lt;/select&gt;&lt;!--选择哪个提交时hello就等于哪个值--&gt;\n\nselected 默认选中\n\n\n\n\n\n\n","categories":["HTML"],"tags":["HTML","表单"]},{"title":"JS基础（一）：基本语法","url":"/2022/03/08/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","content":"编写位置\nonclick属性中\n&lt;button onclick=&quot;alert(&#x27;xxxxxxxxx&#x27;);&quot;&gt;&lt;/button&gt;\n\nhref属性中\n&lt;a href=&quot;javascript:alert(&#x27;xxxxxxxxx&#x27;);&quot;&gt;&lt;/a&gt;\n\nscript标签中\n&lt;script type=&quot;text/javascript&quot;&gt;    alert(&#x27;警告窗口&#x27;);    document.write(&quot;在页面输出一个内容&quot;);    console.log(&quot;向控制台输出一个内容&quot;);&lt;/script&gt;\n\n外部js文件中\n&lt;script type=&quot;text/javascript&quot; src=&quot;js/script.js&quot;&gt;&lt;/script&gt;&lt;!--script标签一旦用于引入外部文件，其内部就不能再写代码了--&gt;\n\n基本语法\n声明变量：var a;\n声明+赋值：var a &#x3D; 0;\n\n标识符：自主命名的（如变量名、函数名、属性名）\n\n命名规则：\n标识符中可含有字母、数字、_、$\n标识符不能以数字开头\n标识符不能是ES中的关键字或保留字\n标识符一般次啊用驼峰命名法\n首字母小写，每个单词开头字母大写，其余字母小写\n\n\n\n\n\n\n字符串：双引号或单引号都可以，但不要混用\n\ntypeof检查变量类型\nconsole.log(typeof a);\n\nNumber类型\n\nNumber.MAX_VALUE 最大值\nNumber.MIN_VALUE 最小正值\nInfinity 正无穷\n-Infinity 负无穷\nNaN 特殊数字，表示Not A Number\n\n\n\nNull类型\n\n表示空对象\ntypeof检查null时，返回object\n\n\nUndefined类型\n\n当声明一个变量，但没有给它负值时，它的值为undefined\n\n\n强制类型转换\n\n将其它数据类型转换为String\n\ntoString()    注：null和undefined没有此方法\n调用String()函数   注：null和undefined可用此方法\n\n\n将其它数据类型转换为Number\n\n调用Number()函数\n\n字符串 –&gt; 数字\n纯数字字符串 - 数字\n存在非数字 - NaN\n空串或全空格 - 0\n\n布尔 –&gt; 数字\ntrue - 1\nflase -0\n\nnull –&gt; 数字 0\n\nundefined –&gt; 数字 0\n\n\n\n调用parseInt()函数  将字符串转换为一个整数：\n​    可将字符串中有效的整数取出（即存在非数字也可以）\n​    在parseInt()中传递第二个参数，来指定数字的进制\n调用parseFloat()函数  将字符串转换为一个浮点数：\n​    可将字符串中有效的小数取出（即存在非数字也可以）\n若对非String使用以上函数，则先将其转换为String再操作\n\n\n\n将其它数据类型转换为Boolean\n\n调用Boolean()函数\n\n数字 –&gt; 布尔\n除了0和NaN，其余都是true\n\n字符串 –&gt; 布尔\n除了空串，其余都是true\n\nnull和undefined都会转为false\n\n对象也会转换为true\n\n\n\n对任意数据类型做两次非运算\n\n\n\n\n\n逻辑运算符\n\n！非   &amp;&amp;与  ||或\n\n\n\n","categories":["JavaScript"],"tags":["JS"]},{"title":"JS基础（七）：DOM","url":"/2022/03/09/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ADOM/","content":"DOM简介\nDOM，全称Document Object Model 文档对象模型\nJS中通过DOM来对HTML文档进行操作\n\n&lt;button id=&quot;btn&quot;&gt;我是一个按钮&lt;/button&gt;&lt;script type=&quot;text/javascript&quot;&gt;    //获取网页中的button对象：    var btn = document.getElementById(&quot;btn&quot;);    //修改按钮中的文字：    btn.innerHTML = &quot;I&#x27;m Button&quot;;&lt;/script&gt;\n\n事件\n可以为按钮的对应事件绑定处理函数的形式来响应事件\n当事件被触发时，对应函数将会被调用\n\n&lt;button id=&quot;btn&quot;&gt;我是一个按钮&lt;/button&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var btn = document.getElementById(&quot;btn&quot;);    //绑定一个单击事件（单击响应函数）    btn.onclick = function()&#123;        alert(&quot;xxxxxxx&quot;);    &#125;;&lt;/script&gt;\n\n\nonload事件\n为window绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，确保代码执行时所有的DOM对象已经加载完毕\nwindow.onload = function()&#123;    var btn = document.getElementById(&quot;btn&quot;);    //绑定一个单击事件（单击响应函数）    btn.onclick = function()&#123;        alert(&quot;xxxxxxx&quot;);    &#125;;&#125;;\n\nDOM查询\n获取元素节点\n\n通过document对象调用\n\ngetElementById()：通过id属性获取一个元素节点对象\n\ngetElementsByTagName()：通过标签名获取一组元素节点对象，返回类数组对象\n\ngetElementsByName()：通过name属性获取一组元素节点对象\n\ngetElementsByClassName()：通过class属性获取一组元素节点对象\nIE8不兼容\n\nbody：属性，获取body标签对象\n\ndocumentElement：属性，获取html标签对象\n\nall：属性，获取所有元素\n\nquerySelector()：根据CSS选择器（作为参数）来查询一个元素节点对象\n//获取box1类下的divvar div = document.querySelector(&quot;.box1 div&quot;);\n\n局限：使用该方法总会返回唯一一个元素，如果满足条件的有多个元素，只会返回第一个\n\nquerySelectorAll()：根据CSS选择器（作为参数）来查询一组元素节点对象，会将结果封装进数组（即使一个结果也会）\n\n\n\n通过具体元的元素节点调用\n\ngetElementById()：方法，返回当前节点的指定标签名后代节点\n\nchildNodes：属性，表示当前节点的所有子节点\n该属性会获取包括文本节点（包括标签间的空白、换行）在内的所有节点\n注：在IE8及以下浏览器中不会将空白文本当成子节点\n\nchildren：属性，表示当前节点的所有子元素（标签）\n\nfirstChild：属性，表示当前节点的第一个子节点（包括空白文本）\n\nfirstElementChild：属性，表示当前节点的第一个子元素\n兼容性不高\n\nlastChild：属性，表示当前节点的最后一个子节点\n\n\n\n通过具体的节点调用\n\nparentNode：属性，表示当前节点的父节点\npreviousSibling：属性，表示当前节点的前一个兄弟节点（包括空白文本）\npreviousElementSibling：属性，表示当前节点的前一个兄弟元素\nnextSibling：属性，表示当前节点的后一个兄弟节点\n\n\n\n\ninnerHTML：用于获取元素内部的HTML代码\n对于自结束标签没有意义\ninnerText：用于获取元素内部的文本内容（自动将标签去除）\n\n获取元素节点的属性\n直接使用  元素.属性名\neg. 元素.id 元素.name 元素.value\n注：读取class属性时要用 元素.className\n\n\nDOM的增删改\ncreateElement()：创建一个元素节点对象，需要一个标签名作为参数\n\ncreateTextNode()：创建一个文本节点对象，需要一个文本内容作为参数\n\nappendChild()：向一个父节点中添加一个新的子节点\n语法：父节点.appendChild(子节点)；\n另一种方式：父节点.innerHTML +&#x3D; “文本”；\n\ninsertBefore()：在指定的子节点前插入新子节点\n语法：父节点.insertBefore(新节点，旧节点)；\n\nreplaceChild()：使用指定子节点替换已有子节点\n语法：父节点.replaceChild(新节点，旧节点)；\n\nremoveChild()：删除一个子节点\n语法：父节点.removeChild(子节点)；\n常用：子节点.parentNode.removeChild(子节点)；\n\n\nDOM访问元素样式\n修改样式（内联样式）\n语法：元素.style.样式名 &#x3D; 样式值 \n注意：若CSS样式名中含有减号-，则将该样式名改为驼峰命名法（去掉-，将-后的字母大写）\nbox1.style.width=&quot;300px&quot;;box1.style.backgroundColor=&quot;yellow&quot;;\n\n获取元素样式（内联样式）\n语法：元素.style.样式名\n只能读取内联样式，无法读取样式表中的样式\n\n获取元素样式（当前显示的样式，包括内联+样式表）\n\n语法：元素.currentStyle.样式名\n谁生效旧获取谁，如果当前元素没有设置该样式，则返回它的默认值\n缺点：只有IE支持，其它浏览器都不支持，且通过此方法读取的样式只读。\n\n语法：getComputedStyle()  可直接使用\n​            参数1：要获取的元素\n​            参数2：可以传递一个伪元素，一般为null\n该方法会返回一个对象，对象中封装了当前元素对应的样式\nvar obj = getComputedStyle(box1,null);alert(obj.width);\n\n若获取的样式没有设置，则会获取到真实的值，而不是默认值。如没有设置width，它不会返回auto，而是一个数值。\n缺点：IE8不支持，且通过此方法读取的样式只读。\n\n自定义函数，获取指定元素的当前的样式\n参数：obj 要获取样式的元素，name 要获取的样式名\nfunction getStyle(obj,name)&#123;        if(window.getComputedStyle)&#123;        //正常浏览器的方式        return getComputedStyle(obj,null)[name];    &#125;else&#123;        //IE8的方式    \treturn obj.currentStyle[name];    &#125;&#125;\n\n\nclientWidth 属性，获取元素可见宽度（包括内容区和内边距）\nclientHeight 属性，获取元素可见高度（包括内容区和内边距）\n返回值不带单位，均为数字，可直接进行计算，只读不可修改\n\noffsetWidth 属性，获取元素整个宽度 （包括内容区、内边距和边框）\noffsetHeight 属性，获取元素整个高度 （包括内容区、内边距和边框）\n\noffsetParent 属性，获取元素的定位父元素\n获取到里当前元素最近的开启了定位的祖先元素，若所有祖先元素都没开启定位，则返回body\n\noffsetLeft 元素相对于其定位父元素的水平偏移量\noffsetTop 元素相对于其定位父元素的垂直偏移量\n\n\n","categories":["JavaScript"],"tags":["JS","DOM","事件"]},{"title":"JS基础（三）：this和arguments","url":"/2022/03/09/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Athis%E5%92%8Carguments/","content":"\n在调用函数时，浏览器每次都会传递进两个隐含的参数：\n\n函数的上下文对象this\n封装实参的对象arguments\n\n\nthis\n解析器在调用函数每次都会向函数内部传递进一个隐含的参数，\n这个隐含的参数就是this，this指向的是一个对象，这个对象称为函数执行的上下文对象\n\n根据函数的调用方式的不同，this会指向不同的对象。\n\n以函数的形式调用时，this永远都是window\n\n以方法的形式调用时，this就是调用方法的那个对象\n\n以构造函数的形式调用时，this就是新创建的那个对象\n\n以call()和apply()调用时，this是第一个参数指定的那个对象（通过此方法修改this）\n\n\narguments\narguments是一个类数组对象，它也可以通过索引来操作数组，也可获取长度\n在调用函数时，所传递的实参都会在arguments中保存\n因此，即使不定义形参，也可以通过arguments来使用实参\n\n\narguments.length 获取实参的长度\n\narguments[0] 第一个实参\narguments[1] 第二个实参….\n\narguments.callee 该属性对应一个函数对象，即当前正在指向的函数的对象\n\n\n","categories":["JavaScript"],"tags":["JS","this","arguments"]},{"title":"JS基础（二）：对象和函数","url":"/2022/03/08/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AF%B9%E8%B1%A1/","content":"对象的分类内建对象\n由ES标准定义的对象，在任何的ES的实现中都可以使用\n比如Date、Math、String、Number、Boolean、Function、Object……\n\n宿主对象\n由JS的运行环境提供的对象，目前来说主要指由浏览器提供的对象\n比如BOM、DOM（一组对象）\n\n自定义对象\n由开发任意自己创建的对象\n\n\n创建对象\n\nvar obj &#x3D;  new Object();\n\nvar obj &#x3D; {\n​    name:”猪八戒”,\n​    age:28,\n​    test:{name:”沙和尚”}\n};\n\n\n\n添加属性\n\nobj.name &#x3D; “孙悟空”;\n\n属性值可以是任何数据类型，也可是函数（即对象的方法）\nobj.sayName &#x3D; function(){\n​        console.log(obj.name)；\n};\n调用对象的方法：obj.sayName();\n\n\n\n删除属性\n\ndelete obj.name;\n\n\nin 运算符：可检查一个对象中是否由指定的属性\n语法：”属性名” in 对象\n示例：console.log(“name” in obj);\n\nfor … in 语句：枚举对象中的属性\n语法：for(var 变量 in 对象) {  }\n示例：for(var n in obj){\n​                    console.log(“属性名：”+n);\n​                    console.log(“属性值：”+obj[n]);\n​            }\n\n\n函数\n函数也是一种对象\n\n\n创建函数\n\nvar fun &#x3D; new Function()  少用\n\n使用函数声明：\nfunction 函数名([形参1，形参2…形参N]){\n​        语句…\n}\n最后不用写分号\n函数内部还可以在声明函数\n\n使用函数表达式：（var 函数名 &#x3D; 匿名函数）\nvar 函数名 &#x3D; function([形参1，形参2…形参N]){\n​        语句…\n}；\n注意结尾要写分号\n\n\n\n形参与实参\n\n声明形参相当于在函数内部声明了对于变量，但是没有赋值\n\n调用时指定实参，实参会赋值给函数中对应的形参\nfunction sum(a,b)&#123;    console.log(a+b);&#125;sum(1,2);\n\n调用函数时解析器不会检查实参类型、数量\n\n实参可以是一个对象，也可以是一个函数\nfunction sayHello(o)&#123;    console.log(&quot;我是&quot;+o.name);&#125;function fun(a)&#123;    a(obj);&#125;fun(sayHello);\n\n形参为匿名函数 (在开发中常见)\nfunction fun(a)&#123;    a(obj);&#125;fun(function()&#123;alert(&quot;hello&quot;)&#125;);\n\n\n返回值\n\nreturn xxx；\n可以是任意的数据类型，也可以是对象，也可以是函数\n\n立即执行函数\n立即执行函数：函数定义完，立即被调用\n立即执行函数往往只会执行一次\n\n//直接这样写会报错function()&#123;\talert(&quot;我是一个匿名函数&quot;);&#125;//加括号表示它是一个整体，则不会报错，但不会执行(function()&#123;\talert(&quot;我是一个匿名函数&quot;);&#125;)//立即执行函数(function()&#123;\talert(&quot;我是一个匿名函数&quot;);&#125;)();//立即执行函数（带参数）(function()&#123;\tconsole.log(&quot;a=&quot;+a);    console.log(&quot;b=&quot;+b);&#125;)();\n\n作用域\n作用域：指一个变量的作用范围\n在JS中一共有两种作用域：全局作用域、函数作用域\n\n全局作用域\n直接在script标签中的JS代码，都在全局作用域\n全局作用域在打开时创建，在页面关闭时销毁\n全局作用域中有一个全局对象window，它代表浏览器的窗口\n在全局作用域中：\n​    创建的变量都会作为window对象的属性保存\n​    创建的函数都会作为window对象的方法保存\n\n函数作用域\n调用函数时创建函数作用域，函数执行完毕后函数作用域销毁\n每调用一次函数就会创建一个新的函数作用域，它们之间是相互独立的\n在函数作用域中要访问同名的全局作用域属性a，可用window.a\n\n使用工厂方法创建对象\n批量创建对象\n\nfuction createPerson(name, age, gender)&#123;    var obj = new Object();        obj.name = name;    obj.age = age;    obj.gender = gender;    obj.sayName = function()&#123;        alert(this.name);    &#125;;        return obj;&#125;var obj1 = createPerson(&quot;孙悟空&quot;,18,&quot;男&quot;);var obj2 = createPerson(&quot;猪八戒&quot;,28,&quot;男&quot;);\n\n\n使用工厂方法创建的对象，使用的构造函数都是Object，所创建的对象都是Object类型，导致无法区分出多种不同类型的对象\n\n使用构造函数创建对象\n构造函数和普通函数的区别就调用方式的不同\n普通函数直接调用，构造函数需要使用new关键词调用\n构造函数执行流程：\n​    1.立刻创建一个新的对象\n​    2.将新建的对象设置为函数中的this，在构造函数中可以使用this来引用新建的对象\n​    3.逐行执行函数中的代码\n​    4.将新建的对象作为返回值返回\n\nfunction Person(name, age, gender)&#123;    this.name = name;    this.age = age;    this.gender = gender;    this.sayName = function()&#123;        alert(this.name);    &#125;;&#125;var per = new Person(&quot;孙悟空&quot;,18,&quot;男&quot;);function Dog(name, age)&#123;    this.name = name;    this.age = age;    this.sayName = function()&#123;        alert(this.name);    &#125;;&#125;var dog = new Dog(&quot;小白&quot;,5);\n\n\n使用同一个构造函数创建的对象，称为一类对象，也将一个构造函数称为一个类\n将通过一个构造函数创建的对象称为该类的实例\n\n使用instanceof可以检查一个对象是否是一个类的示例\n\n语法：对象 instanceof 构造函数\n示例：console.log(dog instanceof Person)      False\n\n\n构造函数每执行一次就会创建一个新的sayName方法，所有实例的sayName都是唯一的。为了提高性能，可将sayName在全局作用域定义。\n\nfunction Person(name, age, gender)&#123;    this.name = name;    this.age = age;    this.gender = gender;    this.sayName = fun;    &#125;;&#125;function fun()&#123;    alert(this.name);&#125;\n\n\n但将函数定义在全局作用域，污染了全局作用域的命名空间，且不安全（容易被覆盖）\n\n原型对象\n我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象称原型对象\n\n\n若函数以普通函数的形式调用，prototype没有任何作用\n若函数以构造函数的形式调用，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，可通过___proto__来访问该属性\n\n\nconsole.log(mc.__proto__ == MyClass.prototype);//返回true\n\n\n原型对象就相当于一个公共区域，所有同一个类的实例都可以访问到这个原型对象。\n因此，创建构造函数时，可将对象中共有的属性和方法统一设置到原型对象中。（不用为每个对象创建属性，也不会影响到全局作用域）\n当访问对象的一个属性或方法时，会先在对象自身中寻找，若没有则会去原型对象中寻找。\n（若再没有则去原型的原型中寻找，直到找到Object对象的原型，Object对象的原型没有原型，如果在Object中依然没有找到，则返回undefined。\n\nfunction Person()&#123;    &#125;Person.prototype.sayName = function()&#123;    alert(this.name);&#125;;\n\n\n使用in检查对象中是否有某属性时，如果对象中没有但原型中有，也会返回true\n可使用对象的hasOwnProperty()来检查对象自身中是否有该属性\n\n","categories":["JavaScript"],"tags":["JS","对象","函数"]},{"title":"JS基础（九）：BOM","url":"/2022/03/11/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9ABOM/","content":"BOM简介\nBOM，浏览器对象模型，BOM可以让我们通过JS来操作浏览器\n在BOM中提供了一组对象，用来完成对浏览器的操作\n\n\nBOM对象：\n\nWindow\n\n代表整个浏览器的窗口，同时window也是网页中的全局对象\n\n\nNavigator\n\n代表当前浏览器信息，通过该对象可识别不同浏览器\n由于历史原因，Navigator中的大部分属性都已经无法帮助我们识别浏览器了\n一般使用userAgent来判断浏览器的信息\n\n\nLocation\n\n代表当前浏览器的地址栏信息，通过该对象可操作浏览器跳转页面\n\nassign() 跳转到其它页面，作用和直接修改location一样\n\nreload() 重新加载当前页面，作用和刷新按钮一样\n若在方法中传递true作为参数，则会强制情况缓存刷新界面\n\nreplace() 跳转到其它页面，不会生成历史记录，不能使用回退按钮\n\n\n\nHistory\n\n代表浏览器的历史记录\n由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前翻页或向后翻页，且该操作只在档次访问时有效\nlength属性，获取到当前访问的链接数量\nback() 回退到上一个页面\nforward() 跳转下一个页面\ngo() 跳转到指定页面，需要整数作为参数\n\n\nScreen\n\n代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息\n\n\n\n\nBOM对象在浏览器中都是作为window对象的属性保存的，可通过window对象来使用，也可以直接使用\n\n\n\n","categories":["JavaScript"],"tags":["JS","BOM"]},{"title":"JS基础（五）：函数的方法call和apply","url":"/2022/03/09/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95call%E5%92%8Capply/","content":"\ncall()和apply()，这两个方法都是函数对象的方法，需要通过函数对象来调用\n\nfunction fun()&#123;    alert(&quot;我是fun函数&quot;);&#125;//以下三者效果相同fun.call();fun.aplly();fun();\n\n\n在调用call()和apply()时，可以将一个对象指定为第一个参数\n此时这个对象将会成为函数执行时的this\n因此，利用call()和apply()可修改this\n\n\ncall()方法可以将实参在对象之后依次传递\napply()方法需要将实参封装到一个数组中统一传递\n\nfunction fun(a,b)&#123;    console.log(&quot;a=&quot;+a);    console.log(&quot;b=&quot;+b);&#125;;var obj = &#123;    name:&quot;obj&quot;;    sayName:function()&#123;        alert(this.name);    &#125;&#125;;fun.call(obj,2,3);fun.call(obj,[2,3]);\n\n","categories":["JavaScript"],"tags":["JS"]},{"title":"JS基础（六）：正则表达式","url":"/2022/03/09/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"创建正则表达式的对象\n语法：var 变量 &#x3D; new RegExp(“正则表达式”,”匹配模式”)；\ntest() 检查字符串是否符合正则表达式的规则\n\nvar reg = new RegExp(&quot;a&quot;);console.log(reg.test(&quot;a&quot;));  //trueconsole.log(reg.test(&quot;bcabc&quot;));  //trueconsole.log(reg.test(&quot;bcbc&quot;));  //false\n\n\n匹配模式：\ni 忽略大小写\ng 全局匹配模式\n\n\n\nvar reg = new RegExp(&quot;a&quot;,&quot;i&quot;);console.log(reg.test(&quot;A&quot;));  //trueconsole.log(reg.test(&quot;bcAbc&quot;));  //trueconsole.log(reg.test(&quot;bcbc&quot;));  //false\n\n正则语法\n创建正则表达式简单方法(字面量方式)\n语法：var 变量 &#x3D; &#x2F;正则表达式&#x2F;匹配模式\n使用字面量方式创建更加简单，使用构造函数创建更加灵活（因为可以传递正则表达式变量）\n\n\nvar reg = new RegExp(&quot;a&quot;);//相当于如下var reg = /a/i;\n\n\na|b   检查字符串中是否有a或b\n\n[abcd]  检查字符串中是否有a或b或c或d（[]中的内容也是或的关系)\n\n[a-z] 任意小写字母\n[A-Z] 任意大写字母\n[A-z] 任意字母\n\na[bde]c 检查字符串中是否含有abc或ade或aec\n\n[^ac] 含有除了ab的字母\n[^0-9] 除了数字\n\n量词：量词只对它前面的一个内容起作用\n\n{n} 正好连续出现n次\na{3} a连续出现3次\n(ab){3} ab连续出现3次\n\n{m,n} 出现m-n次\n\n{m，} 出现m次以上\n\n+，至少一个，相当于{1，}\n\n*，0个或多个，相当于{0，}\n\n？，0个或一个，相当于{0，1}\n\n\n\n^a 匹配以a开头  （与[^a]区分）\n\na$ 匹配以a结尾\n\n^a$ 完全匹配a\n如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式\n\n^a|a$ 以a开头或以a结尾\n\n示例：\n\n检查一个字符串是否是个合法手机号\n\n\n\n1\n3\n567890123\n\n\n\n以1开头\n第二位3-9\n第三位以后任意数字\n\n\n^1\n[3-9]\n[0-9]{9}$\n\n\nvar phoneStr = &quot;13067890123&quot;;var phoneReg = /^1[3-9][0-9]&#123;9&#125;$/;console.log(phoneReg.test(phoneStr));\n\n\n.    表示任意字符\n\n检查一个字符串中是否含有. （\\） \nvar reg = /\\./;reg = new RegExo(&quot;\\\\.&quot;);var reg = /\\\\/;reg = new RegExo(&quot;\\\\\\\\&quot;);\n\n\n\\w 表示任意字母、数字、下划线_\n\\W 表示除任意字母、数字、下划线_外\n\n\\d 表示任意的数字\n\\D 表示除了数字\n\n\\s 空格\n\\S 除了空格\n//删除开头的空格str = str.replace(/^\\s*/,&quot;&quot;)//删除结尾的空格str = str.replace(/\\s*$/,&quot;&quot;)//删除开头和结尾的空格str = str.replace(/^\\s*|\\s*$/g,&quot;&quot;)\n\n\\b 单词边界\n\\D 除了单词边界\nreg = /\\bchild\\b/;console.log(reg.test(hello children));//falseconsole.log(reg.test(hello child));//ture\n\n示例：\n\n电子邮件正则表达式\n\n\n\nhello.nihao\n@\nabc.com.cn\n\n\n\n任意字母数字下划线.任意字母数字下划线\n\n任意字母数字.任意字母（2-5位）.任意字母（2-5位）\n\n\n^\\w{3,} (\\.\\w+)*\n@\n[A-z0-9]+ (\\.[A-z]{2,5}){1,2}$\n\n\n\n\nvar emaiReg = /^\\w&#123;3,&#125;(\\\\.\\w+)*@[A-z0-9]+ (\\\\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/\n\n\n\n字符串和正则表达式\n\n\nsplit()\n可以将一个字符串拆分为一个数组\n方法中可以传递一个正则表达式作为参数，那么将会根据正则表达式去拆分字符串\n不需要设置全局匹配\n\nvar str =&quot;1a2b3c4d5e6f7&quot;;//根据任意字母将字符串拆分var result = str.split(/[A-z]/);  //输出1，2，3，4，5，6，7\n\n\nsearch()可以搜索字符串中是否有指定内容\n不能设置全局匹配\n\nvar str =&quot;hello abc hello aec afc&quot;;var result = str.search(/a[bef]c/);  \n\n\nmatch()\n可以根据正则表达式，从一个字符串中将符合条件的内容提取出来\nmatch()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果\n\nvar str =&quot;1a2b3c4d5e6f7&quot;;var result = str.match(/[A-z]/); //输出a//全局匹配var result = str.match(/[A-z]/g); //输出a,b,c,d,e,fvar str =&quot;1a2b3c4d5e6f7A8B9C&quot;;//全局匹配+忽略大小写var result = str.match(/[a-z]/ig); //输出a,b,c,d,e,f,A,B,C\n\n\nreplace() \n可将字符串中指定内容替换为新的内容\n参数：\n\n被替换的内容，可接受一个正则表达式作为参数\n新的内容\n\n\nvar str =&quot;1a2b3c4d5e6f7&quot;;var result = str.replace(/[a-z]/ig,&quot;@&quot;); //输出1@2@3@4@5@6@7//删除字母var result = str.replace(/[a-z]/ig,&quot;&quot;); //输出1234567\n\n","categories":["JavaScript"],"tags":["JS","正则表达式"]},{"title":"JS基础（十二）：JSON","url":"/2022/03/12/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9AJSON/","content":"JSON简介\nJS中的对象只有JS自己认识，其它语言都不认识\nJSON是一个特殊格式的字符串，这个字符串可以被任意的语言所识别，并且可以转换为任意语言中的对象，JSON再开发中主要用来数据的交互\nJSON：Javascript Object Notation (JS对象表示法)\n\n\nJSON和JS对象的格式一样，但是JSON字符串中的属性名必须加双引号，其它和JS语法一致\nJSON中允许的值：\n字符串\n数值\n布尔值\nnull\n对象（除了函数对象）\n数组\n\n\n\nJSON分类\n对象 {}\nvar obj = &#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;;\n\n数组 []\nvar arr = &#x27;[1,2,3,&quot;hello&quot;,true]&#x27;;\n\n将JSON字符串转换为JS中的对象\nJS中为我们提供了一个工具类，就叫JSON\n这个对象可以将一个JSON转换为JS对象，也可以将JS对象转换为JSON\nJSON在ie7中不兼容，可用eval()：用来执行一段字符串形式的JS代码，并将执行结果返回，如果字符串中有{}，它会将其当成代码块解析，若不希望，则需要在字符串前后各加一个()。开发中尽量避免使用。还可以通过引入一个外部的js文件来处理，json2.js.\n\njson –&gt; js对象：JSON.parse()\n将json字符串转换为js对象，参数：json字符串\n\njs对象 –&gt; json：JSON.stringify()\n将js对象转换为json字符串，参数：js对象\n\n\n","categories":["JavaScript"],"tags":["JS","JSON"]},{"title":"JS基础（八）：事件","url":"/2022/03/11/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E4%BA%8B%E4%BB%B6/","content":"事件对象\n当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数\n事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标、键盘按下的按键、鼠标滚轮滚动的方向\n\n\nonmousemove 该事件会在鼠标在元素中移动时被触发\nareaDiv.onmousemove = function(event)&#123;    //在IE8中，将事件对象作为window对象的属性保存的    //解决兼容问题    if(!event)&#123;        event=window.event;    &#125;    //另一种写法（常用）    event = event || window.event;        var x = event.clientX;    var y = event.clientY;        showMsg.innerHTML = &quot;x=&quot;+x+&quot;,y=&quot;+y;&#125;;\n\n事件的冒泡(Bubble)\n\n\n冒泡：指事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发\n在实际开发中大部分情况冒泡时有益的，若不希望发生事件冒泡可以通过事件对象（event）来取消冒泡\n\n将事件对象的cancelBubble设置为true，即可取消冒泡\ns1.onclick = function(event)&#123;    alert(&quot;我是span的单击响应函数&quot;);    event.cancelBubble = true;&#125;\n\n\n\n事件的委派\n希望只绑定一次事件，即可应用到多个元素上，即使元素是后添加的\n委派：将事件统一绑定给元素的共同祖先元素，当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。\n事件委派利用了冒泡，可以减少事件的绑定次数，提高程序性能\n\n\nevent.target 返回触发事件的对象\n\n&lt;ul id=&quot;u1&quot;&gt;    &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;超链接一&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;超链接二&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;link&quot;&gt;超链接三&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;\n\nu1.onclick = function()&#123;    //如果触发事件的对象是我们期望的元素，则执行否则不执行    if (event.target.className == &quot;link&quot;)&#123;    \talert(&quot;我是ul的单击响应函数&quot;);    &#125;);\n\n事件的绑定\n使用 对象.事件 &#x3D; 函数 的形式绑定响应函数，只能同时为一个元素的一个事件绑定一个响应函数，不能绑定多个，若绑定了多个，则后面的会覆盖掉前面的\n\n\naddEventListener() 此方法也可以为元素绑定响应函数\n参数1：事件的字符串，不要on（click）\n参数2：回调函数，当事件触发时该函数会被条用\n参数3：是否在捕获阶段触发事件，需要一个布尔值，一般都是false\n\n它可同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数的绑定顺序执行。\n这里的this是绑定事件的对象。\n\n\n\nbtn01.addEventListener(&quot;click&quot;,function()&#123;    alert(1);&#125;,false);btn01.addEventListener(&quot;click&quot;,function()&#123;    alert(2);&#125;,false);btn01.addEventListener(&quot;click&quot;,function()&#123;    alert(3);&#125;,false);\n\n​    IE8中不支持以上方法，可使用attachEvent()来绑定事件\n\nattachEvent() \n参数1：事件的字符串，要on （onclick）\n参数2：回调函数\n\n它可同时为一个元素的相同事件同时绑定多个响应函数，执行顺序与addEventListener()相反，先绑定的后执行。\n这里的this是window\n\n\nbind函数：用来为指定元素绑定响应函数\n参数1：obj 要绑定事件的对象\n参数2：eventStr 事件的字符串(不要on)\n参数3：callback 回调函数\nfunction bind(obj,eventStr,callback)&#123;    if(obj.addEventListener)&#123;        //大部分浏览器兼容方式        obj.addEventListener(eventStr,callbak,false);    &#125;else&#123;        /*        * this是谁由调用方式决定，通过call()修改this        * callback.call(obj)        * 但callback是浏览器调用的，可通过匿名函数方式代替        */        //IE8及以下    \tobj.attachEvent(&quot;on&quot;+eventStr,function()&#123;            //在匿名函数中调用回调函数            callback.call(obj);        &#125;);    &#125;&#125;bind(btn01,&quot;click&quot;,function()&#123;    alert(this);&#125;);\n\n拖拽事件\n当我们拖拽网页中的内容是，浏览器会默认区搜索引擎中搜索内容，\n此时会导致拖拽功能的异常，若不希望发生这个行为，则可通过return false来取消默认行为\n\n\n元素.setCapture() 设置当前元素捕获所有鼠标按下的事件\n\n滚轮事件\nonmousewheel 鼠标滚动时触发\nevent.wheelDelta 获取鼠标滚轮滚动的方向\n\n键盘事件\n键盘事件一般会绑定给一些可以获取到焦点的对象或者document\n\n\nonkeydown 按键被按下\n如果一直按着某个键不松，则事件会一直触发。当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一点，其它次会非常快，为了防止误操作的发生。\n在文本框中输入内容属于onkeydown的默认行为，如果在onkeydown中取消了默认行为（return false），则输入的内容不会出现在文本框中。\ninput.onkeydown = function(event)&#123;    event = eventt || window.event;    //使文本框中不能输入数字    if(event.keyCode &gt;= 48 &amp;&amp; event.keyCode &lt;=57)&#123;        return false;    &#125;&#125;\n\nonkeyup 按键被松开\n\nevent.keyCode 获取按键的编码\nevent.altKey 判断alt是否被按下\nevent.ctrlKey 判断ctrl是否被按下\nevent.shiftKey 判断shift是否被按下\n\n示例：键盘上下左右移动div\n\n\nwindow.onload = function()&#123;    document.onkeydown = function(event)&#123;        event = event || window.event;        //定义一个变量，来表示移动的速度        var speed = 10;        //37左，38上，39右，40下        switch(event.keyCode)&#123;            case 37:                //向左                box1.style.left = box1.offsetLeft - speed + &quot;px&quot;;                break;            case 39:                //向右                box1.style.left = box1.offsetLeft + speed + &quot;px&quot;;                break;            case 38:                //向上                box1.style.top = box1.offsetLeft - speed + &quot;px&quot;;                break;            case 40:                //向下                box1.style.top = box1.offsetLeft + speed + &quot;px&quot;;                break;        &#125;    &#125;&#125;\n\n","categories":["JavaScript"],"tags":["JS","事件"]},{"title":"JS基础（十一）：类的操作","url":"/2022/03/12/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E6%93%8D%E4%BD%9C/","content":"修改class属性//向一个元素中添加指定的class属性值function addClass(obj,cn)&#123;    if(hasClass(obj,cn))&#123;        obj.className += &quot;&quot;+cn;    &#125;&#125;//判断一个元素中是否含有指定的class属性值function hasClass(cn)&#123;    var reg = new RegExp(&quot;\\\\b&quot;+cn+&quot;\\\\b&quot;);    return reg.test(obj.className);&#125;//删除一个元素中指定的class属性值function removeClass(obj,cn)&#123;    var reg = new RegExp(&quot;\\\\b&quot;+cn+&quot;\\\\b&quot;);    obj.className = obj.className.replace(reg,&quot;&quot;);&#125;//切换class属性值，元素中有该类则删除，没有该类则添加function toggleClass(obj,cn)&#123;    if(hasClass(obj,cn))&#123;        removeClass(obj,cn);    &#125;else&#123;        addClass(obj,cn);    &#125;&#125;\n\n","categories":["JavaScript"],"tags":["JS","class"]},{"title":"JS基础（四）：forEach","url":"/2022/03/09/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AforEach/","content":"\nforEach()方法需要一个函数（名）作为参数\nIE8及以下的浏览器均不支持该方法\n\nvar arr=[&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];//一般不这么写arr.forEach(fun);//一般这么写（通过匿名函数）,由浏览器直接调用arr.forEach(function(value,index,obj)&#123;    console.log(&quot;value=&quot;+value);    console.log(&quot;index=&quot;+index);    console.log(&quot;obj=&quot;+obj);&#125;);\n\n\n类似这种由我们创建但不由我们调用的函数，称为回调函数。\n数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来。\n\n浏览器会在回调函数中传递三个参数：\n\n第一个参数，当前正在遍历的元素\n第二个参数，当前正在遍历的元素的索引\n第三个参数，正在遍历的数组本身\n\n","categories":["JavaScript"],"tags":["JS"]},{"title":"JS基础（十）：定时器","url":"/2022/03/11/JS%E5%9F%BA%E7%A1%80%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8/","content":"定时调用\n定时调用，可以使一段程序每隔一段时间执行一次\n\n\nsetInterval() 定时调用\n参数1：回调函数，该函数会每隔一段时间被调用一次\n参数2：每次调用间隔的时间，单位是毫秒\n返回值：返回一个Number类型的数据，这个数字用来作为定时器的唯一标识。\nvar num = 1;var timer = setInterval(function()&#123;    count.innerHTML = num++;    if(num == 11)&#123;        //关闭定时器       clearInterval(timer)    &#125;&#125;,1000);\n\n切换图片练习var img1 = document.getElementById(&quot;img1&quot;);var imgArr = [&quot;img/1.jpg&quot;,&quot;img/2.jpg&quot;,&quot;img/3.jpg&quot;,&quot;img/4.jpg&quot;];var index = 0;setInterval(function()&#123;    index = index % imgArr.length;    img1.src = imgArr[index];&#125;,1000);\n\n延时调用\n延时调用一个函数不马上执行，而是隔一段时间后再执行，且只会执行一次\n延时调用和定时调用实际上是可以相互代替的\n\n\nsetTimeout()\nvar time = setTimeout(function()&#123;    console.    log(num++);&#125;,3000);clearTimeout(timer);\n\n移动（动画）练习\n参数：\nobj：要执行动画的对象\nattr：要执行动画的样式，比如：left top width height\ntarget：执行动画的目标位置\nspeed：移动速度（正数向右，负数向左）\ncallback：回调函数，该函数会在动画执行完毕后执行\n\n\n\nfunction move(obj,attr,target,speed,callback)&#123;    //关闭上一个定时器    clearInterval(obj.timer);    //获取元素目前的位置    var current = parseInt(getStyle(obj,attr));    //判断速度是正负值    if(current&gt;target)&#123;        speed = -speed;    &#125;    //开启一个定时器    //向执行动画的对象中添加一个timer属性，用来保存它自己的定时器标识    obj.timer = setInterval(function()&#123;        var oldValue = parseInt(getStyle(obj,attr));        var newValue = oldValue + speed;        if((speed &lt; 0 &amp;&amp; newValue &lt; target) || (speed&gt;0 &amp;&amp; newValue &gt; target))&#123;            nawValue = target;        &#125;        obj.style[attr]=newValue + &quot;px&quot;;        if(newValue == target)&#123;            //达到目标，关闭定时器            clearInterval(obj.timer);            //动画执行完毕，调用回调函数            callback &amp;&amp; callback();        &#125;    &#125;,30)&#125;//定义一个函数，用来获取指定元素的当前样式//参数：obj 要获取样式的元素，name 要获取的样式名function getStyle(obj,name)&#123;    if(window.getComputedStyle)&#123;        //正常浏览器的方式        return getComputedStyle(obj,null)[name];    &#125;else&#123;        return obj.currentStyle[name];    &#125;&#125;\n\n\n将以上代码单独放在一个js文件中\n\n轮播图练习//点击超链接切换到指定图片//为所有超链接绑定单击响应函数for(var i=0;i&lt;allA.length;i++)&#123;    allA[i].num = i;    allA[i].onlick = function()&#123;        //关闭自动切换的定时器        clearInterval(timer);        //获取点击超链接的索引        index = this.num;        //修改正在选中的a        srtA();         //使用自定义的move函数来切换图片        move(imgList,&quot;left&quot;,-520*index,20,function()&#123;            //动画执行完毕，开启定时器            autoChange();        &#125;);    &#125;;&#125;//自动切换图片autoChange();//创建一个函数，设置选中的afunction setA()&#123;    //判断当前索引是否是最后一张图片    if(index &gt;= imgArr.length -1)&#123;        index =0;        //此时显示最后一张图片，和第一张一模一样        //通过css将最后一张切换成第一张        imgList.style.left = 0;    &#125;    //将所有a的背景颜色设置为红色\tfor(var i=0;i&lt;allA.length;i++)&#123;        allA[i].style.backgoundColor = &quot;&quot;;  //默认为红色    &#125;    //选中的a设置为黑色    allA[index].style.backgroundColor = &quot;blace&quot;;&#125;;var timer;//创建一个函数，用来开启自动切换图片function autoChange()&#123;    //开启定时器     timer = setInterval(function()&#123;        index %= imgArr.length;        move(imgList,&quot;left&quot;,-520*index,20,function()&#123;            //修改导航按钮,回调函数会在每次函数执行完毕后执行            setA()        &#125;);    &#125;,3000);&#125;\n\n","categories":["JavaScript"],"tags":["JS","定时器"]},{"title":"项目搭建相关Tips","url":"/2022/03/05/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3Tips/","content":"CSS文件分类\nindex.css：当前页面样式\n\nreset.css：重置样式\n\nbase.css：公共样式\n.clearfix::before,.clearfix::after&#123;    content:&#x27;&#x27;;    display:table;    clear:both;&#125;body&#123;    font:...;    color:#333;    /*保证浏览器缩小时，中间容器布局不混乱*/    min-width:1226px;&#125;/*中间容器*/.w&#123;    width:1226px;    margin:0 auto;&#125;\n\n生成小三角（利用边框）\n创建一个大小为0的盒子，只保留一边的边框颜色，其余边全设置为透明。\n示例：\n\n.box1&#123;\twidth:0px;    height:0px;    border:10px red solid;    border-top:none;    border-color:trasparent trasparent blue trasparent;&#125;\n\n\n效果：\n\n\n\n网站发布时的压缩\n加载时速度变快\n\n将css和js中的注释、空行去除：\nindex.css -&gt; index.min.css\n工具：\n\nJS &amp; CSS Minifier\n\n\n\n","categories":["项目"],"tags":["CSS","HTML","实战演练"]}]